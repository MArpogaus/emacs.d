#+TITLE: Emacs Literate Configuration
#+AUTHOR: Marcel Arpogaus
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
  - [[#org-file-tweaks][Org File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#settings][Settings]]
    - [[#package-management][Package Management]]
  - [[#better-defaults][Better Defaults]]
    - [[#startup][Startup]]
    - [[#encoding][Encoding]]
    - [[#recovery][Recovery]]
    - [[#bookmarks][Bookmarks]]
    - [[#history][History]]
    - [[#cursor][Cursor]]
    - [[#customization-file][Customization File]]
    - [[#cursor-1][Cursor]]
    - [[#text][Text]]
    - [[#mouse][Mouse]]
    - [[#scroll][Scroll]]
    - [[#typography][Typography]]
    - [[#default-mode][Default mode]]
    - [[#tabulations][Tabulations]]
    - [[#time-stamp-in-header][time-stamp in header]]
    - [[#change-re-builder-syntax][Change re-builder syntax]]
  - [[#packages][Packages]]
    - [[#modus-themes][Modus Themes]]
    - [[#doom-modline][doom-modline]]
    - [[#nerd-icons][nerd-icons]]
    - [[#all-the-icons][all-the-icons]]
    - [[#recent-files][Recent files]]
    - [[#highlighting-current-line][Highlighting current line]]
    - [[#parenthesis][Parenthesis]]
    - [[#server][Server]]
    - [[#evil][Evil]]
    - [[#which-key][which-key]]
    - [[#undo-tree][Undo-Tree]]
    - [[#vertico][Vertico]]
    - [[#savehist][Savehist]]
    - [[#swiper][Swiper]]
    - [[#magit][Magit]]
    - [[#gitgutter][GitGutter]]
    - [[#projectile][Projectile]]
    - [[#treemacs][Treemacs]]
    - [[#ascii-art-to-unicode][ascii-art-to-unicode]]
    - [[#pdf-tools][pdf-tools]]
    - [[#citar][Citar]]
    - [[#org][Org]]
    - [[#evil-org-mode][evil-org-mode]]
    - [[#org-brain][org-brain]]
    - [[#org-noter][org-noter]]
    - [[#toc-org][toc-org]]
    - [[#org-cliplink][org-cliplink]]
    - [[#org-modern][org-modern]]
    - [[#flycheck][Flycheck]]
    - [[#helpful][Helpful]]
    - [[#ligatures][Ligatures]]
  - [[#post-initialization][Post Initialization]]

** About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

** Org File Tweaks
There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Visibility Settings
Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show it's direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_3_gh:=. This
tells an org-mode package =toc-org= to generate a table of contents under this heading
that has a max depth of 3 and is created using Github-style hrefs. This table of contents
is updated everytime the file is saved and makes for a functional table of contents that
works property directly on github.

** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Your Name Here"
        user-mail-address "user@email.com")
#+END_SRC

** Emacs Initialization

*** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
We'll lower this value significantly after initialization has completed. We don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6))
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

*** Package Management

**** Package Settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el= to not automatically call it on our behalf. Additionally we're setting =package-enable-at-startup= to nil so that packages will not automatically be loaded for us since =use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-native-compile t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

**** Use-Package Settings
Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t
        use-package-verbose t)
#+END_SRC

**** Manually Set Load Path
We're going to set the load path ourselves so that we don't have to call =package-initialize= at
runtime and incur a large performance hit. This load-path will actually be faster than the one
created by =package-initialize= because it appends the elpa packages to the end of the load path.
Otherwise any time a builtin package was required it would have to search all of third party paths
first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (add-to-list 'load-path (directory-files package-user-dir t "^[^.]" t)))
#+END_SRC

**** Initialize Package Management
Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
of the package initialization during compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling =use-package= statements results
in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC

We'll use the [[help:bind-key][bind-key]] function (from use-package) for bindings. Then we can use [[help:describe-personal-keybindings][describe-personal-keybindings]] to check for personal bindings.

#+begin_src emacs-lisp
(require 'bind-key)
#+end_src
** Better Defaults
https://github.com/rougier/dotemacs

*** Startup

Emacs does a lot of things at startup and here, we disable pretty much everything.

#+begin_src emacs-lisp

  (setq-default
   inhibit-startup-screen t               ; Disable start-up screen
   inhibit-startup-message t              ; Disable startup message
   inhibit-startup-echo-area-message t    ; Disable initial echo message
   initial-scratch-message ""             ; Empty the initial *scratch* buffer
   initial-buffer-choice t                ; Open *scratch* buffer at init
   display-line-numbers-type t)

#+end_src

*** Encoding

We tell emacs to use UTF-8 encoding as much as possible.

#+begin_src emacs-lisp

  (set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
  (prefer-coding-system       'utf-8)     ; Add utf-8 at the front for automatic detection.
  (set-terminal-coding-system 'utf-8)     ; Set coding system of terminal output
  (set-keyboard-coding-system 'utf-8)     ; Set coding system for keyboard input on TERMINAL
  (set-language-environment "English")    ; Set up multilingual environment

#+end_src
*** Recovery

If Emacs or the computer crashes, you can recover the files you were editing at the time of the crash from their auto-save files. To do this, start Emacs again and type the command ~M-x recover-session~. Here, we parameterize how files are saved in the background.

#+begin_src emacs-lisp

  (setq auto-save-list-file-prefix ; Prefix for generating auto-save-list-file-name
        (expand-file-name ".auto-save-list/.saves-" user-emacs-directory)
        auto-save-default t        ; Auto-save every buffer that visits a file
        auto-save-timeout 20       ; Number of seconds between auto-save
        auto-save-interval 200)    ; Number of keystrokes between auto-saves

#+end_src

*** Bookmarks

#+begin_src emacs-lisp
  (setq bookmark-default-file (expand-file-name "bookmark" user-emacs-directory))
#+end_src

*** History

Remove text properties for kill ring entries (see https://emacs.stackexchange.com/questions/4187). This saves a lot of time when loading it.

#+begin_src emacs-lisp 

  (defun unpropertize-kill-ring ()
    (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

  (add-hook 'kill-emacs-hook 'unpropertize-kill-ring)

#+end_src

*** Cursor

Record cursor position from one session ot the other

#+begin_src emacs-lisp

  (setq save-place-file (expand-file-name "saveplace" user-emacs-directory)
        save-place-forget-unreadable-files t)

  (save-place-mode 1)

#+end_src

*** Customization File

Since init.el will be generated from this file, we save customization in a dedicated file.

#+begin_src emacs-lisp

  (setq custom-file (concat user-emacs-directory "custom.el"))

  (when (file-exists-p custom-file)
    (load custom-file nil t))

#+end_src

*** Cursor

We set the appearance of the cursor: horizontal line, 2 pixels thick, no blinking

#+begin_src emacs-lisp

  (setq-default cursor-in-non-selected-windows nil ; Hide the cursor in inactive windows
                cursor-type '(hbar . 2)            ; Underline-shaped cursor
                cursor-intangible-mode t           ; Enforce cursor intangibility
                x-stretch-cursor nil)              ; Don't stretch cursor to the glyph width

  (blink-cursor-mode 0)                            ; Still cursor

#+end_src

*** Text

Pretty self-explanatory

#+begin_src emacs-lisp

  (setq-default use-short-answers t                     ; Replace yes/no prompts with y/n
                confirm-nonexistent-file-or-buffer nil) ; Ok to visit non existent files

#+end_src

*** Mouse

Mouse behavior can be finely controlled using the [[help:mouse-avoidance-mode][mouse-avoidance-mode]].

#+begin_src emacs-lisp

  (setq-default mouse-yank-at-point t) ; Yank at point rather than pointer
  (mouse-avoidance-mode 'exile)        ; Avoid collision of mouse with point

#+end_src

Mouse active in tty mode.

#+begin_src emacs-lisp

  (unless (display-graphic-p)
    (xterm-mouse-mode 1)
    (global-set-key (kbd "<mouse-4>") #'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") #'scroll-up-line))

#+end_src

*** Scroll

Smoother scrolling.

#+begin_src emacs-lisp

  (setq-default scroll-conservatively 101       ; Avoid recentering when scrolling far
                scroll-margin 2                 ; Add a margin when scrolling vertically
                recenter-positions '(5 bottom)) ; Set re-centering positions

#+end_src

*** Typography

#+begin_src emacs-lisp

  (setq-default fill-column 80                          ; Default line width 
                sentence-end-double-space nil           ; Use a single space after dots
                bidi-paragraph-direction 'left-to-right ; Faster
                truncate-string-ellipsis "…")           ; Nicer ellipsis

#+end_src

*** Default mode

Default & initial mode is text.

#+begin_src emacs-lisp

  (setq-default initial-major-mode 'text-mode   ; Initial mode is text
                default-major-mode 'text-mode)  ; Default mode is text

#+end_src

Visual line mode for prog and text modes

#+begin_src emacs-lisp

  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'prog-mode-hook 'visual-line-mode)

#+end_src

*** Tabulations

No tabulation, ever.

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil        ; Stop using tabs to indent
                tab-always-indent 'complete ; Indent first then try completions
                tab-width 4)                ; Smaller width for tab characters

  ;; Let Emacs guess Python indent silently
  (setq python-indent-guess-indent-offset t
        python-indent-guess-indent-offset-verbose nil)

#+end_src

*** time-stamp in header
Update time stamp in Headr when file is saved
#+begin_src emacs-lisp
  (setq
   time-stamp-active t          ; do enable time-stamps
   time-stamp-format "%04Y-%02m-%02d %02H:%02M:%02S (%U)") ; date format
  (add-hook 'write-file-functions 'time-stamp) ; update when saving
#+end_src

*** Change re-builder syntax
https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder

#+begin_src emacs-lisp
  (setq reb-re-syntax 'string)
#+end_src
                                        
** Packages

*** Modus Themes
Accessible themes for GNU Emacs, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA)
https://protesilaos.com/emacs/modus-themes

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :config
    ;; Minimal UI
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil)

    ;; Load the theme of your choice.
    (load-theme 'modus-operandi :no-confirm)

    ;; (define-key global-map (kbd "<f5>") #'modus-themes-toggle

    ;; Choose some fonts
    ;; (set-face-attribute 'default nil :family "Iosevka")
    ;; (set-face-attribute 'variable-pitch nil :family "Iosevka Aile")
    ;; (set-face-attribute 'org-modern-symbol nil :family "Iosevka")

    ;; Add frame borders and window dividers
    (modify-all-frames-parameters
     '((right-divider-width . 20)
       (internal-border-width . 20)))
    (dolist (face '(window-divider
                    window-divider-first-pixel
                    window-divider-last-pixel))
      (face-spec-reset-face face)
      (set-face-foreground face (face-attribute 'default :background)))
    (set-face-background 'fringe (face-attribute 'default :background)))
#+END_SRC
*** doom-modline
A fancy and fast mode-line inspired by minimalism design.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    ;; If non-nil, cause imenu to see `doom-modeline' declarations.
    ;; This is done by adjusting `lisp-imenu-generic-expression' to
    ;; include support for finding `doom-modeline-def-*' forms.
    ;; Must be set before loading doom-modeline.
    (setq doom-modeline-support-imenu t)

    :config
    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (setq doom-modeline-height 20)
  
    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (setq doom-modeline-hud t)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (setq doom-modeline-icon t)

    ;; If non-nil, only display one number for checker information if applicable.
    (setq doom-modeline-checker-simple-format t)

    (doom-modeline-mode 1))
#+END_SRC

*** nerd-icons
A Library for Nerd Font icons. Required for modline icons.
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons)
  #+END_SRC
*** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src
*** Recent files

50 Recents files with some exclusion (regex patterns).

#+begin_src emacs-lisp
  (use-package recentf
    :config

    (setq recentf-max-menu-items 10
          recentf-max-saved-items 100)

    (let (message-log-max)
      (recentf-mode 1)))
#+end_src
*** Highlighting current line

Highlighting of the current line (native mode)

#+begin_src emacs-lisp
  (use-package hl-line
    :config
    (global-hl-line-mode))
#+end_src

*** Parenthesis

Paren mode for highlighting matcing paranthesis

#+begin_src emacs-lisp
  (use-package paren
    :config
    ;; (setq show-paren-style 'expression)
    (setq show-paren-style 'parenthesis)
    (setq show-paren-when-point-in-periphery t)
    (setq show-paren-when-point-inside-paren nil)
    (show-paren-mode))
#+end_src

*** Server

Server start.

#+begin_src emacs-lisp
  (use-package server
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src

*** Evil
Install, automatically load, and enable evil. It's like vim, but better!

heavily inspired by: [[https://github.com/doomemacs/doomemacs/blob/master/modules/editor/evil/config.el][doomemacs/config.el at master]] 

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :preface
    (setq evil-ex-search-vim-style-regexp t
          evil-ex-visual-char-range t  ; column range for ex commands
          evil-mode-line-format 'nil
          ;; more vim-like behavior
          evil-symbol-word-search t
          ;; if the current state is obvious from the cursor's color/shape, then
          ;; we won't need superfluous indicators to do it instead.
          evil-default-cursor '+evil-default-cursor-fn
          evil-normal-state-cursor 'box
          evil-emacs-state-cursor  '(box +evil-emacs-cursor-fn)
          evil-insert-state-cursor 'bar
          evil-visual-state-cursor 'hollow
          ;; Only do highlighting in selected window so that Emacs has less work
          ;; to do highlighting them all.
          evil-ex-interactive-search-highlight 'selected-window
          ;; It's infuriating that innocuous "beginning of line" or "end of line"
          ;; errors will abort macros, so suppress them:
          evil-kbd-macro-suppress-motion-error t
          evil-undo-system 'undo-tree)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)

    ;; PERF: Stop copying the selection to the clipboard each time the cursor
    ;; moves in visual mode. Why? Because on most non-X systems (and in terminals
    ;; with clipboard plugins like xclip.el active), Emacs will spin up a new
    ;; process to communicate with the clipboard for each movement. On Windows,
    ;; older versions of macOS (pre-vfork), and Waylang (without pgtk), this is
    ;; super expensive and can lead to freezing and/or zombie processes.
    ;;
    ;; UX: It also clobbers clipboard managers (see emacs-evil/evil#336).
    (setq evil-visual-update-x-selection-p nil)
    (evil-mode 1))

  ;; This is a collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default, such as help-mode, M-x calendar, Eshell and more.
  (use-package evil-collection
    :after evil
    :requires evil
    :config
    (evil-collection-init))
#+end_src

*** which-key

The mode displays the key bindings following your currently entered incomplete command (a ;; prefix) in a popup.

#+begin_src emacs-lisp
  (use-package which-key
    :demand t
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+end_src

*** Undo-Tree

#+begin_src emacs-lisp
  (use-package undo-tree
    ;; Branching & persistent undo
    :custom (undo-tree-history-directory-alist `(("." . ,(concat user-emacs-directory "undo-tree-hist/"))))
    :config
    (setq undo-tree-visualizer-diff t
          undo-tree-auto-save-history t
          undo-tree-enable-undo-in-region t
          ;; Increase undo limits to avoid emacs prematurely truncating the undo
          ;; history and corrupting the tree. This is larger than the undo-fu
          ;; defaults because undo-tree trees consume exponentially more space,
          ;; and then some when `undo-tree-enable-undo-in-region' is involved. See
          ;; syl20bnr/spacemacs#12110
          undo-limit 800000           ; 800kb (default is 160kb)
          undo-strong-limit 12000000  ; 12mb  (default is 240kb)
          undo-outer-limit 128000000) ; 128mb (default is 24mb)

    ;; Compress undo-tree history files with zstd, if available. File size isn't
    ;; the (only) concern here: the file IO barrier is slow for Emacs to cross;
    ;; reading a tiny file and piping it in-memory through zstd is *slightly*
    ;; faster than Emacs reading the entire undo-tree file from the get go (on
    ;; SSDs). Whether or not that's true in practice, we still enjoy zstd's ~80%
    ;; file savings (these files add up over time and zstd is so incredibly fast).
    (when (executable-find "zstd")
      (defun my/add_zst_ext (file)
        (concat file ".zst"))
      (advice-add 'my/add_zst_ext
                  :filter-return #'undo-tree-make-history-save-file-name))

    (global-undo-tree-mode))
#+end_src

*** Vertico
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. 

#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :config
    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)

    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)

    ;; enable vertico
    (vertico-mode))
#+end_src

*** Savehist
We save every possible history we can think of.

#+begin_src emacs-lisp 
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :config
    (setq kill-ring-max 50
          history-length 50)

    (setq savehist-additional-variables
          '(kill-ring
            command-history
            set-variable-value-history
            custom-variable-history   
            query-replace-history     
            read-expression-history   
            minibuffer-history        
            read-char-history         
            face-name-history         
            bookmark-history
            file-name-history))

    (put 'minibuffer-history         'history-length 50)
    (put 'file-name-history          'history-length 50)
    (put 'set-variable-value-history 'history-length 25)
    (put 'custom-variable-history    'history-length 25)
    (put 'query-replace-history      'history-length 25)
    (put 'read-expression-history    'history-length 25)
    (put 'read-char-history          'history-length 25)
    (put 'face-name-history          'history-length 25)
    (put 'bookmark-history           'history-length 25)

    ;; No duplicates in history  
    (setq history-delete-duplicates t)

    ;;Start history mode.
    (let (message-log-max)
      (savehist-mode)))
#+end_src

*** Swiper
Swiper is an awesome searching utility with a quick preview. Let's install it and
load it when =swiper= or =swiper-all= is called.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :commands (swiper swiper-all))
#+END_SRC

*** Magit
The magical git client. Let's load magit only when one of the several entry pont
functions we invoke regularly outside of magit is called.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status magit-blame magit-log-buffer-file magit-log-all))
#+END_SRC

*** GitGutter

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config
    (require 'git-gutter)
    ;; If you enable global minor mode
    (global-git-gutter-mode t)

    ;; If you would like to use git-gutter.el and linum-mode
    ;; (git-gutter:linum-setup)

    :bind
    (("C-x C-g" . git-gutter)
     ("C-x v =" . git-gutter:popup-hunk)

     ;; Jump to next/previous hunk
     ("C-x p" . git-gutter:previous-hunk)
     ("C-x n" . git-gutter:next-hunk)

     ;; Stage current hunk
     ("C-x v s" . git-gutter:stage-hunk)

     ;; Revert current hunk
     ("C-x v r" . git-gutter:revert-hunk)

     ;; Mark current hunk
     ("C-x v SPC" . git-gutter:mark-hunk)))
#+END_SRC

*** Projectile
Projectile is a quick and easy project management package that "just works". We're
going to install it and make sure it's loaded immediately.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t)
#+END_SRC

*** Treemacs
Tree layout file explorer for Emacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-all-the-icons
    :after (treemacs all-the-icons)
    :config
    (treemacs-load-theme "all-the-icons"))

  (use-package treemacs-evil
    :requires evil
    :after (treemacs evil))

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :config (treemacs-set-scope-type 'Tabs))
#+END_SRC

*** ascii-art-to-unicode
Make org-brain-visualize-mode look a bit nicer.
#+begin_src emacs-lisp
  (use-package ascii-art-to-unicode
    :config
    (defface aa2u-face '((t . nil))
      "Face for aa2u box drawing characters")
    (advice-add #'aa2u-1c :filter-return
                (lambda (str) (propertize str 'face 'aa2u-face)))
    (defun aa2u-org-brain-buffer ()
      (let ((inhibit-read-only t))
        (make-local-variable 'face-remapping-alist)
        (add-to-list 'face-remapping-alist
                     '(aa2u-face . org-brain-wires))
        (ignore-errors (aa2u (point-min) (point-max)))))
    (with-eval-after-load 'org-brain
      (add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer)))
#+end_src

*** pdf-tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (add-hook 'doc-view-mode-hook 'pdf-tools-install)

    (setq-default pdf-view-use-scaling t
                  pdf-view-use-imagemagick nil))
#+end_src
*** Citar
Citar provides a highly-configurable completing-read front-end to browse and act on BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX, markdown, and org-cite editing support.

#+begin_src emacs-lisp
    (use-package citar
      :no-require
      :after (org all-the-icons)
      :custom
      (org-cite-insert-processor 'citar)
      (org-cite-follow-processor 'citar)
      (org-cite-activate-processor 'citar)
      :config
      (setq citar-bibliography (car (file-expand-wildcards (concat org-directory "bib/*.bib")))
            citar-notes-paths (list (concat org-directory "brain/bib_notes/"))
            ctar-notes-template-multiple-files '(concat "#+TITLE: ${title}\n"
                                                        "#+AUTHOR: ${author editor}\n"
                                                        "#+DATE: ${date}\n"
                                                        "#+SOURCE: ${doi url}\n"
                                                        "#+CUSTOM_ID: ${=key= id}\n"
                                                        "#+cite_export: biblatex ieee\n"
                                                        (concat "#+bibliography: " citar-bibliography "\n\n")
                                                        "* Notes :ignore:\n"
                                                        ":PROPERTIES:\n"
                                                        ":NOTER_DOCUMENT: ${file} \n"
                                                        ":END:\n\n"
                                                        "* Summary :childless:showchildren:export:\n"
                                                        "This is a summary of [citet:@${=key=}].\n"
                                                        "** Bibliography :ignore:\n"
                                                        )
            citar-notes-template-one-file (concat "** TODO ${=key=}: ${title}, (${year}) :${type}:\n"
                                                  ":PROPERTIES:\n"
                                                  ":Custom_ID: ${=key=}\n"
                                                  ":FILE: [[file:${file}]]\n"
                                                  ":END:\n"
                                                  "See [[cite:&${=key=}]]\n")
            citar-templates `((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
                              (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
                              (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
                              (note . ,(eval ctar-notes-template-multiple-files)))
            citar-symbols `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
                            (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
                            (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " "))
            citar-symbol-separator "  ")

      ;; optional: org-cite-insert is also bound to C-c C-x C-@
      ;;:bind
      ;;(:map org-mode-map :package org ("C-c b" . #'org-cite-insert))
      )
#+end_src

*** Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :init
    (setq org-directory (concat (getenv "HOME") "/Notes/org/"))
    :config
    (add-to-list 'org-modules 'org-habit t)
    (setq org-agenda-files
          (mapcar 'file-truename
                  (file-expand-wildcards (concat org-directory "agenda/*.org"))))

    ;; Refile
    (setq org-refile-targets `((,(concat org-directory "agenda/agenda.org") :maxlevel . 3)
                               (,(concat org-directory "agenda/projects.org") :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
                               (,(concat org-directory "agenda/someday.org") :level . 1)
                               (,(concat org-directory "agenda/literature.org") :maxlevel . 2)
                               (,(concat org-directory "agenda/scheduled.org") :maxlevel . 2)))

    ;; Save the corresponding buffers
    (defun gtd-save-org-buffers ()
      "Save `org-agenda-files' buffers without user confirmation. See also `org-save-all-org-buffers'"
      (interactive)
      (message "Saving org-agenda-files buffers...")
      (save-some-buffers t (lambda ()
                             (when (member (buffer-file-name) org-agenda-files)
                               t)))
      (message "Saving org-agenda-files buffers... done"))

    ;; Add it after refile
    (advice-add 'org-refile :after
                (lambda (&rest _)
                  (gtd-save-org-buffers)))

    ;; Wie gehts das??
    ;; (defun gtd-sort-tasks (&rest ignore)
    ;;   (org-sort-list nil ?x))
    ;; (add-hook 'org-after-todo-state-change-hook #'gtd-sort-tasks)

    ;; Todo
    (setq org-todo-keywords
          '((sequence
             "TODO(t)"  ; A task that needs doing & is ready to do
             "PROJ(p)"  ; A project, which usually contains other tasks
             "NEXT(n)"  ; Next task in a project
             "STRT(s)"  ; A task that is in progress
             "WAIT(w)"  ; Something external is holding up this task
             "HOLD(h)"  ; This task is paused/on hold because of me
             "|"
             "DONE(d)"  ; Task successfully completed
             "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
            (sequence
             "[ ](T)"   ; A task that needs doing
             "[-](S)"   ; Task is in progress
             "[?](W)"   ; Task is being held up or paused
             "|"
             "[X](D)")) ; Task was completed
          org-todo-keyword-faces
          '(("[-]"  . +org-todo-active)
            ("STRT" . +org-todo-active)
            ("[?]"  . +org-todo-onhold)
            ("WAIT" . +org-todo-onhold)
            ("HOLD" . +org-todo-onhold)
            ("PROJ" . +org-todo-project)))
    (defun log-todo-next-creation-date (&rest ignore)
      "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
      (when (and (string= (org-get-todo-state) "NEXT")
                 (not (org-entry-get nil "ACTIVATED")))
        (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
    (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)

    ;; Add timstamp to items when doen
    (setq org-log-done 'time)

    ;; Agenda
    (setq org-agenda-custom-commands
          '(("g" "Get Things Done (GTD)"
             ((agenda ""
                      ((org-agenda-span 'day)
                       (org-agenda-start-day "today")
                       (org-agenda-skip-function
                        '(or (org-agenda-skip-entry-if 'deadline)
                             (my/org-agenda-skip-without-match "-groceries")
                             (my/org-agenda-skip-without-match "-social")))
                       (org-deadline-warning-days 0)))
              (todo "STRT"
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
                     (org-agenda-prefix-format "  %i %-12:c [%e] ")
                     (org-agenda-overriding-header "\nActive Tasks\n")))
              (todo "NEXT"
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
                     (org-agenda-prefix-format "  %i %-12:c [%e] ")
                     (org-agenda-overriding-header "\nNext Tasks\n")))
              (agenda nil
                      ((org-agenda-entry-types '(:deadline))
                       (org-agenda-format-date "")
                       (org-deadline-warning-days 7)
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                       (org-agenda-overriding-header "\nDeadlines")))
              (tags-todo "inbox"
                         ((org-agenda-prefix-format "  %?-12t% s")
                          (org-agenda-overriding-header "\nInbox\n")))
              (todo "HOLD|WAIT"
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
                     (org-agenda-prefix-format "  %i %-12:c [%e] ")
                     (org-agenda-overriding-header "\nPaused Tasks\n")))
              (tags "CLOSED>=\"<today>\""
                    ((org-agenda-overriding-header "\nCompleted today\n")))))
            ("G" "Shopping List" tags-todo "groceries"
             ((org-agenda-tags-todo-honor-ignore-options t)
              (org-agenda-skip-deadline-prewarning-if-scheduled t)
              (org-agenda-todo-ignore-scheduled 'future)
              (org-agenda-sorting-strategy '(scheduled-up))
              (org-agenda-prefix-format "%s")))
            ("l" "Literature" tags-todo "literature"
             ((org-agenda-sorting-strategy '(priority-down category-keep effort-up))
              (org-agenda-prefix-format "  %i %-12:c [%e] ")))
            ("p" "Social"
             ((agenda ""
                      ((org-agenda-span 'week)
                       (org-agenda-start-day "today")
                       (org-agenda-skip-function
                        '(or (org-agenda-skip-entry-if 'deadline)
                             (my/org-agenda-skip-without-match "-groceries")))
                       (org-deadline-warning-days 0)))
              (tags-todo "social"
                         ((org-agenda-tags-todo-honor-ignore-options t)
                          (org-agenda-skip-deadline-prewarning-if-scheduled t)
                          (org-agenda-todo-ignore-scheduled 'future)
                          (org-agenda-sorting-strategy '(scheduled-up))
                          (org-agenda-prefix-format "%s"))))))
          )
    ;; archive all DONE tasks in subtree
    ;; https://stackoverflow.com/questions/6997387
    (defun org-archive-done-tasks ()
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
       "/DONE" 'tree))
    ;; Org LaTeX language support
    ;; https://orgmode.org/manual/LaTeX-specific-export-settings.html
    (add-to-list 'org-latex-packages-alist
                 '("AUTO" "babel" t ("pdflatex")))
    (add-to-list 'org-latex-packages-alist
                 '("AUTO" "polyglossia" t ("xelatex" "lualatex")))

    (with-eval-after-load 'ox-latex
      ;; Support for KOMA script article class
      ;; https://orgmode.org/worg/org-tutorials/org-latex-export.html#org3ed51b6
      (add-to-list 'org-latex-classes
                   '("koma-article"
                     "\\documentclass{scrartcl}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      (add-to-list 'org-latex-classes
                   '("koma-letter"
                     "\\documentclass{scrlttr2}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

    (with-eval-after-load 'ox-beamer
      (add-to-list 'org-beamer-environments-extra
                   '("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}")))

    (with-eval-after-load 'ox-extra
      (ox-extras-activate '(ignore-headlines))))
#+END_SRC

Let's include a newer version of org-mode than the one that is built in. We're going
to manually remove the org directories from the load path, to ensure the version we
want is prioritized instead.

*** evil-org-mode
#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :requires evil 
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

*** org-brain
#+begin_src emacs-lisp
  (use-package org-brain
    :after (org org-noter)
    :init
    (setq org-brain-path (concat org-directory "brain/"))

    ;; For Evil users
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 24)
    (setq org-brain-include-file-entries t
          org-brain-file-entries-use-title t)

    ;; from org brain README
    ;; Here’s a command which uses org-cliplink to add a link from the clipboard
    ;; as an org-brain resource.
    ;; It guesses the description from the URL title.
    ;; Here I’ve bound it to L in org-brain-visualize.
    (defun org-brain-cliplink-resource ()
      "Add a URL from the clipboard as an org-brain resource.
  Suggest the URL title as a description for resource."
      (interactive)
      (let ((url (org-cliplink-clipboard-content)))
        (org-brain-add-resource
         url
         (org-cliplink-retrieve-title-synchronously url)
         t)))

    ;; Org-noter’s purpose is to let you create notes that are kept in sync when
    ;; you scroll through the [PDF etc] document
    (add-hook 'org-noter-insert-heading-hook #'org-id-get-create)
    (defun org-brain-open-org-noter (entry)
      "Open `org-noter' on the ENTRY.
  If run interactively, get ENTRY from context."
      (interactive (list (org-brain-entry-at-pt)))
      (org-with-point-at (org-brain-entry-marker entry)
        (org-noter)))

    (defun org-brain-insert-resource-icon (link)
      "Insert an icon, based on content of org-mode LINK."
      (insert (format "%s "
                      (cond ((string-prefix-p "brain:" link)
                             (all-the-icons-fileicon "brain"))
                            ((string-prefix-p "info:" link)
                             (all-the-icons-octicon "info"))
                            ((string-prefix-p "help:" link)
                             (all-the-icons-material "help"))
                            ((string-prefix-p "http" link)
                             (all-the-icons-icon-for-url link))
                            (t
                             (all-the-icons-icon-for-file link))))))
    (add-hook 'org-brain-after-resource-button-functions #'org-brain-insert-resource-icon)
    ;; Allows you to edit entries directly from org-brain-visualize
    ;; (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode)
    ;;:bind (:map org-brain-visualize-mode-map
    ;;      "L" . org-brain-cliplink-resource
    ;;      "C-c n" . org-brain-open-org-noter)
    )
#+end_src

*** org-noter

#+begin_src emacs-lisp
  (use-package org-noter
    :after (org pdf-tools)
    :config
    (setq
     ;; The WM can handle splits
     org-noter-notes-window-location 'other-frame
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil
     ;; Everything is relative to the main notes file
     ;; org-noter-notes-search-path (list bibtex-completion-notes-path)
     )
    )
#+end_src

*** toc-org
Let's install and load the =toc-org= package after org mode is loaded. This is the
package that automatically generates an up to date table of contents for us.

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :after org
    :init (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC

*** org-cliplink
A simple command that takes a URL from the clipboard and inserts an org-mode link with a title of a page found by the URL into the current buffer.

#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :after org)
#+END_SRC

*** org-modern 
This package implements a modern style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks.

#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :hook (org-mode . global-org-modern-mode)
    :after org
    :config
    ;; (setq org-modern-label-border 0.3)

    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-fold-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…"

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────"))
#+END_src

*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
  #+END_SRC

*** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.
It is a bit slow to load so we do need load it explicitely.

#+begin_src emacs-lisp
  (use-package helpful
    :config
                                          ; Focus new help windows when opened
    (setq help-window-select t))
#+end_src
*** Ligatures

#+BEGIN_SRC emacs-lisp
  (use-package ligature
    :config
    ;; set Fira as default font
    (set-frame-font "Fira Code Light-10" nil t)
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures '(eww-mode org-mode) '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures '(prog-mode org-mode)
                            '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                              ;; =:= =!=
                              ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                              ;; ;; ;;;
                              (";" (rx (+ ";")))
                              ;; && &&&
                              ("&" (rx (+ "&")))
                              ;; !! !!! !. !: !!. != !== !~
                              ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                              ;; ?? ??? ?:  ?=  ?.
                              ("?" (rx (or ":" "=" "\." (+ "?"))))
                              ;; %% %%%
                              ("%" (rx (+ "%")))
                              ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                              ;; |->>-||-<<-| |- |== ||=||
                              ;; |==>>==<<==<=>==//==/=!==:===>
                              ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                              "-" "=" ))))
                              ;; \\ \\\ \/
                              ("\\" (rx (or "/" (+ "\\"))))
                              ;; ++ +++ ++++ +>
                              ("+" (rx (or ">" (+ "+"))))
                              ;; :: ::: :::: :> :< := :// ::=
                              (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                              ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                              ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                              "="))))
                              ;; .. ... .... .= .- .? ..= ..<
                              ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                              ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                              ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                              ;; *> */ *)  ** *** ****
                              ("*" (rx (or ">" "/" ")" (+ "*"))))
                              ;; www wwww
                              ("w" (rx (+ "w")))
                              ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                              ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                              ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                              ;; << <<< <<<<
                              ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                              "-"  "/" "|" "="))))
                              ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                              ;; >> >>> >>>>
                              (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                              ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                              ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                           (+ "#"))))
                              ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                              ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                              ;; __ ___ ____ _|_ __|____|_
                              ("_" (rx (+ (or "_" "|"))))
                              ;; Fira code: 0xFF 0x12
                              ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                              ;; Fira code:
                              "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                              ;; The few not covered by the regexps.
                              "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+END_SRC

** Post Initialization
Let's lower our GC thresholds back down to a sane level.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1)
#+END_SRC
