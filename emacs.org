#+TITLE: Emacs Literate Configuration
#+AUTHOR: Marcel Arpogaus
#+PROPERTY: header-args :tangle yes
#+STARTUP: show2levels
#+auto_tangle: t

* Configuration

** Table of Contents                                               :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#references][References]]
  - [[#conventional-headers-for-emacs-libraries][Conventional Headers for Emacs Libraries]]
  - [[#to-dos][To-dos]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#settings][Settings]]
    - [[#package-management][Package Management]]
    - [[#benchmark-init][benchmark init]]
    - [[#personal-information][Personal Information]]
    - [[#paths][Paths]]
    - [[#emacs-configuration][Emacs Configuration]]
    - [[#keymaps][Keymaps]]
  - [[#packages][Packages]]
    - [[#ui][UI]]
    - [[#org][Org]]
    - [[#tools][Tools]]
    - [[#completion][Completion]]
    - [[#version-control][Version Control]]
    - [[#project-management][Project Management]]
    - [[#programming][Programming]]
    - [[#keybindings][Keybindings]]
  - [[#conventional-library-footer][Conventional Library Footer]]

** References
This Emacs literate configuration has been inspired by the following projects:

- [[https://github.com/gilbertw1/emacs-literate-starter/blob/master/emacs.org][emacs-literate-starter/emacs.org at master Â· gilbertw1/emacs-literate-starter...]]
- [[https://github.com/rougier/dotemacs][GitHub - rougier/dotemacs: Litterate configuration for GNU Emacs]]
- [[https://systemcrafters.net/emacs-from-scratch/the-best-default-settings/][The 6 Emacs Settings Every User Should Consider - System Crafters]]
- [[https://config.daviwil.com/emacs][Emacs Configuration - config.daviwil.com]]
- [[https://github.com/doomemacs/doomemacs][GitHub - doomemacs/doomemacs: An Emacs framework for the stubborn martian hacker]]
- [[https://panadestein.github.io/emacsd][Pandenstein - Emacs literate configuration]]
** Conventional Headers for Emacs Libraries
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Headers.html][Library Headers (GNU Emacs Lisp Reference Manual)]]
#+begin_src emacs-lisp
    ;;; emacs.el --- Emacs configuration  -*- lexical-binding: t; -*-
  ;; This file has been generated from emacs.org file. DO NOT EDIT.

  ;; Copyright (C) 2010-2021 Marcel Arpogaus

  ;; Author: Marcel Arpogaus
  ;; Keywords: internal
  ;; URL: https://github.com/MArpogaus/emacs.d/

  ;; This file is not part of GNU Emacs.
#+end_src
** To-dos :noexport_1:
*** TODO Add debugger
- [[https://github.com/emacs-lsp/dap-mode][GitHub - emacs-lsp/dap-mode: Emacs Debug Adapter Protocol]]
- [[https://emacs-lsp.github.io/dap-mode/page/python-poetry-pyenv/][Python, debbuging with poetry + pyenv - DAP Mode]]

*** TODO Add iPython shell command
*** TODO Add doom snippets?
- [[https://github.com/ptn/doom-snippets][GitHub - ptn/doom-snippets: The Doom Emacs snippets library]]

*** TODO Keybindings
- [[https://github.com/abo-abo/hydra][GitHub - abo-abo/hydra: make Emacs bindings that stick around]]
- [[https://github.com/magit/transient][GitHub - magit/transient: Transient commands]]

*** DONE Fix git timemachine
CLOSED: [2023-05-24 Wed 08:55]
:PROPERTIES:
:ACTIVATED: [2023-05-24]
:END:
need meow-motion-mode!
** Emacs Initialization
*** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time and add a hook to measure Emacs startup time.
We'll lower this value significantly after initialization has completed.
We don't want to keep this value too high or it will result in long GC pauses during normal usage.

Taken from: https://github.com/nilcons/emacs-use-package-fast#a-trick-less-gc-during-startup

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold most-positive-fixnum
	  gc-cons-percentage 0.6)
    ;; Let's lower our GC thresholds back down to a sane level.
    (add-hook 'after-init-hook (lambda ()
				 ;; restore after startup
				 (setq gc-cons-threshold (* 2 1000 1000)
				       gc-cons-percentage 0.1)))

    ;; Profile emacs startup
    (add-hook 'emacs-startup-hook
	      (lambda ()
		(message "*** Emacs loaded in %s with %d garbage collections."
			 (format "%.2f seconds"
				 (float-time
				  (time-subtract after-init-time before-init-time)))
			 gcs-done))))
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

*** Package Management

**** straight.el bootstrap code
This section provides the bootstrap code for =straight.el=, a package manager for Emacs. The code includes optimization for startup time, disables file modification checking for performance, and loads the =straight.el= bootstrap file, which contains essential functionality. Here's the code:

#+begin_src emacs-lisp
  (eval-and-compile
    ;; Optimze startup time
    ;; https://github.com/radian-software/straight.el#my-use-package-form-isnt-working-properly
    ;; (if (and (executable-find "watchexec") (executable-find "python3"))
    ;;     (setq straight-check-for-modifications '(watch-files find-when-checking))
    ;;   (setq straight-check-for-modifications '(check-on-save find-when-checking)))
    ;;disable checking (for speedup).
    (setq straight-check-for-modifications nil)

    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 6))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))
#+end_src
**** install and configure use-package

Lets install and configure =use-package= and use =straight= as the underlying package manager.
We also load =bind-key= here which is used by =use-package= for keybindings.

#+begin_src emacs-lisp
  (eval-and-compile
    (setq straight-use-package-by-default t
	  use-package-always-defer t)
    (straight-use-package 'use-package))

  (require 'bind-key)
#+end_src

*** benchmark init
#+begin_src emacs-lisp :tangle no
  (use-package benchmark-init
    :demand t
    ;; To disable collection of benchmark data after init is done.
    :hook (after-init . benchmark-init/deactivate))
#+end_src

*** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marcel Arpogaus"
	user-mail-address "znepry.necbtnhf@tznvy.pbz")
#+END_SRC

*** Paths
Use no-littering to automatically set common paths to the new user-emacs-directory =~/.cache/emacs=..
#+BEGIN_SRC emacs-lisp
  (use-package no-littering
    :demand t
    :init
    (setq org-directory (concat (getenv "HOME") "/Notes/org/"))
    (setq org-cite-global-bibliography (file-expand-wildcards (concat org-directory "bib/*.bib")))
    (setq org-brain-path (concat org-directory "brain/"))
    (setq custom-snippets-dir (expand-file-name "snippets/" user-emacs-directory))
    (setq my/templates-path (expand-file-name "templates.eld" user-emacs-directory))

    ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
    (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
	  url-history-file (expand-file-name "url/history" user-emacs-directory)))
#+end_src
*** Emacs Configuration
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    ;; Startup
    ;; Emacs does a lot of things at startup and here, we disable pretty much everything.
    (inhibit-startup-screen t)               ; Disable start-up screen
    (inhibit-startup-message t)              ; Disable startup message
    (inhibit-startup-echo-area-message t)    ; Disable initial echo message
    (initial-scratch-message "")             ; Empty the initial *scratch* buffer
    ;; Encoding
    ;; We tell emacs to use UTF-8 encoding as much as possible.
    (set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
    (prefer-coding-system       'utf-8)     ; Add utf-8 at the front for automatic detection.
    (set-terminal-coding-system 'utf-8)     ; Set coding system of terminal output
    (set-keyboard-coding-system 'utf-8)     ; Set coding system for keyboard input on TERMINAL
    (set-language-environment "English")    ; Set up multilingual environment
    :init
    ;; Recovery
    ;; If Emacs or the computer crashes, you can recover the files you were editing at the time of the crash from their auto-save files. To do this, start Emacs again and type the command ~M-x recover-session~. Here, we parameterize how files are saved in the background.
    (setq auto-save-list-file-prefix ; Prefix for generating auto-save-list-file-name
	  (expand-file-name ".auto-save-list/.saves-" user-emacs-directory)
	  auto-save-default t        ; Auto-save every buffer that visits a file
	  auto-save-timeout 20       ; Number of seconds between auto-save
	  auto-save-interval 200)    ; Number of keystrokes between auto-saves

    ;; History
    ;; Remove text properties for kill ring entries (see https://emacs.stackexchange.com/questions/4187). This saves a lot of time when loading it.
    (defun unpropertize-kill-ring ()
      (setq kill-ring (mapcar 'substring-no-properties kill-ring)))

    ;; Customization File
    ;; Since init.el will be generated from this file, we save customization in a dedicated file.
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file 'noerror 'nomessage)

    ;; Cursor
    ;; We set the appearance of the cursor: horizontal line, 2 pixels thick, no blinking
    (setq cursor-in-non-selected-windows nil ; Hide the cursor in inactive windows
	  cursor-type '(hbar . 2)            ; Underline-shaped cursor
	  cursor-intangible-mode t           ; Enforce cursor intangibility
	  x-stretch-cursor nil)              ; Don't stretch cursor to the glyph width
    (blink-cursor-mode 0)                            ; Still cursor

    ;; Text
    ;; Pretty self-explanatory
    (setq use-short-answers t                     ; Replace yes/no prompts with y/n
	  confirm-nonexistent-file-or-buffer nil) ; Ok to visit non existent files

    ;; Mouse
    ;; Mouse behavior can be finely controlled using mouse-avoidance-mode.
    (setq mouse-yank-at-point t) ; Yank at point rather than pointer
    (mouse-avoidance-mode 'exile)        ; Avoid collision of mouse with point

    ;; Mouse active in tty mode.
    (unless (display-graphic-p)
      (xterm-mouse-mode 1)
      ;; Scroll
      ;; Smoother scrolling.
      (setq scroll-conservatively 101       ; Avoid recentering when scrolling far
	    scroll-margin 2                 ; Add a margin when scrolling vertically
	    recenter-positions '(5 bottom))) ; Set re-centering positions

    ;; Typography
    (setq fill-column 80                          ; Default line width
	  sentence-end-double-space nil           ; Use a single space after dots
	  bidi-paragraph-direction 'left-to-right ; Faster
	  truncate-string-ellipsis "â¦")           ; Nicer ellipsis

    ;; Default mode
    ;; Default & initial mode is text.
    (setq initial-major-mode 'text-mode   ; Initial mode is text
	  default-major-mode 'text-mode)  ; Default mode is text

    ;; Tabulations
    ;; No tabulation, ever.
    (setq indent-tabs-mode nil        ; Stop using tabs to indent
	  tab-always-indent 'complete ; Indent first then try completions
	  tab-width 4)                ; Smaller width for tab characters

    ;; Don't pop up UI dialogs when prompting
    (setq use-dialog-box nil
	  use-file-dialog nil)

    ;; disable native compiler warnings
    (setq native-comp-async-report-warnings-errors nil)

    ;; DOOM: add some space between fringe it and buffer.
    (setq fringes-outside-margins t)

    :bind
    ;;ESC Cancels All
    (("<escape>" . keyboard-escape-quit))

    :hook
    ;; Enable word wrapping
    (((prog-mode conf-mode text-mode) . visual-line-mode)
     ;; display column number in modeline
     ((prog-mode conf-mode) . column-number-mode)
     (kill-emacs . unpropertize-kill-ring)))

  ;; Automatically update file timestamps when file is saved
  (use-package time-stamp
    :custom
    (time-stamp-active t)
    (time-stamp-format "%04Y-%02m-%02d %02H:%02M:%02S (%U)")
    :hook
    (write-file . time-stamp))

  ;; Record cursor position from one session to the other
  (use-package saveplace
    :hook
    (after-init . save-place-mode))

  ;; Enable repeat maps
  (use-package repeat
    :hook
    (after-init . repeat-mode))

  ;; Enable line numbers for some modes
  (use-package display-line-numbers
    :hook
    (((prog-mode conf-mode text-mode) . display-line-numbers-mode)
     ;; disable for org mode
     (org-mode . (lambda () (display-line-numbers-mode 0)))))

  ;; Automatically add closing parentheses, quotes, etc.
  (use-package elec-pair
    :hook
    ((prog-mode conf-mode) . electric-pair-mode))

  ;; Revert buffers when the underlying file has changed
  (use-package autorevert
    :config
    ;; Revert Dired and other buffers
    (setq global-auto-revert-non-file-buffers t)
    :hook
    (after-init . global-auto-revert-mode))

  ;; Change re-builder syntax
  ;; https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder
  (use-package re-builder
    :commands re-builder
    :custom
    (reb-re-syntax 'string))

  ;; Navigate between windows with Shift-arrow
  ;; (use-package windmove
  ;;   :demand t
  ;;   :config
  ;;   (when (fboundp 'windmove-default-keybindings)
  ;;     (windmove-default-keybindings)))

  ;; Replace selected text when typing
  (use-package delsel
    :hook
    ((prog-mode conf-mode text-mode) . delete-selection-mode))

  ;; Code folding commands
  (use-package hideshow
    :hook
    ((prog-mode conf-mode) . hs-minor-mode))

  ;; Major mode for interacting with a terminal
  (use-package term
    :commands term
    :unless (not (file-exists-p "/bin/zsh")) ; we only use it if shell exists
    :custom
    (shell-file-name "/bin/zsh")
    (explicit-shell-file-name "/bin/zsh"))

  ;; Undo and redo changes to window configuration
  (use-package winner
    :hook
    (after-init . winner-mode))
#+end_src
*** Keymaps

This section initializes various keymaps used for different purposes.

#+BEGIN_SRC emacs-lisp
  ;; setup keymaps
  (use-package emacs
    :config
    ;; remove keybind for suspend-frame
    (global-unset-key (kbd "C-z"))
    (defvar my/leader-map (make-sparse-keymap) "key-map for leader key")

    ;; version control commands
    (defvar my/version-control-map (make-sparse-keymap) "key-map for version control commands")
    (defvar my/git-gutter-repeat-map (make-sparse-keymap) "key-map for GitGutter commands")
    (define-key my/leader-map "v" (cons "version-control" my/version-control-map))
    (define-key my/version-control-map "g" (cons "gutter" my/git-gutter-repeat-map))

    ;; completion commands
    (defvar my/completion-map (make-sparse-keymap) "key-map for completion commands")
    (define-key my/leader-map "." (cons "completion" my/completion-map))

    ;; file, buffer, window and workspace commands
    (defvar my/buffer-map (make-sparse-keymap) "key-map for buffer commands")
    (define-key my/leader-map "b" (cons "buffer" my/buffer-map))
    (defvar my/buffer-scale-map (make-sparse-keymap) "key-map for buffer text scale commands")
    (define-key my/buffer-map "z" (cons "scale" my/buffer-scale-map))
    (defvar my/window-map (make-sparse-keymap) "key-map for window commands")
    (define-key my/leader-map "w" (cons "window" my/window-map))
    (defvar my/file-map (make-sparse-keymap) "key-map for file commands")
    (define-key my/leader-map "f" (cons "file" my/file-map))
    (defvar my/workspace-map (make-sparse-keymap) "key-map for workspace commands")
    (define-key project-prefix-map "w" (cons "workspace" my/workspace-map))

    ;; toggle commands
    (defvar my/toggle-map (make-sparse-keymap) "key-map for toggle commands")
    (define-key my/leader-map "t" (cons "toggle" my/toggle-map))

    ;; opening recent files ne buffer frame etc
    (defvar my/open-map (make-sparse-keymap) "key-map for open commands")
    (define-key my/leader-map "o" (cons "open" my/open-map))

    ;; add predefined maps to leader map
    (define-key my/leader-map "g" (cons "goto" goto-map))
    (define-key my/leader-map "h" (cons "help" help-map))
    (define-key my/leader-map "p" (cons "project" project-prefix-map))
    (define-key my/leader-map "s" (cons "search" search-map))
    ;;    (define-key my/leader-map "x" (cons "C-x" ctl-x-map))

    (bind-keys   :map my/buffer-map
		 ("e" . eval-buffer)
		 ("k" . kill-this-buffer)
		 ("K" . kill-buffer)
		 ("c" . clone-buffer)
		 ("r" . revert-buffer)
		 ("e" . eval-buffer)
		 ("s" . save-buffer)
		 :map my/file-map
		 ("f" . find-file)
		 ("F" . find-file-other-window)
		 ("d" . find-dired)
		 ("c" . copy-file)
		 ("f" . find-file)
		 ("d" . delete-file)
		 ("r" . reaname-file)
		 ("w" . write-file)
		 :map my/open-map
		 ("F" . make-frame)
		 ("i" . ielm)
		 ("s" . eshell)
		 ("t" . term)
		 :map my/toggle-map
		 ("h" . hs-toggle-hiding)
		 :repeat-map my/buffer-scale-map
		 ("+" . text-scale-increase)
		 ("-" . text-scale-decrease)
		 ("=" . text-scale-adjust)
		 :repeat-map my/window-map
		 ("n" . next-window-any-frame)
		 ("p" . previous-window-any-frame)
		 ("k" . delete-window)
		 ("K" . kill-buffer-and-window)
		 ("+" . enlarge-window)
		 ("-" . shrink-window)
		 ("*" . enlarge-window-horizontally)
		 ("â" . shrink-window-horizontally)
		 :exit
		 ("=" . balance-windows)
		 ("r" . split-window-right)
		 ("b" . split-window-below)
		 ("l" . split-window-left)
		 ("t" . split-window-top)
		 ("v" . split-window-vertically)
		 ("h" . split-window-horizontally)
		 ("m" . delete-other-windows)
		 ("m" . delete-other-windows)
		 ("M" . delete-other-windows-vertically)
		 ))
#+END_SRC

** Packages
*** UI
**** Modus Themes
Accessible themes for GNU Emacs, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA)
https://protesilaos.com/emacs/modus-themes

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :demand t
    :bind
    (:map my/toggle-map
	  ("t" . modus-themes-toggle))
    :config
    ;; Minimal UI
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
	  modus-themes-bold-constructs nil)

    ;; Load the theme of your choice.
    (load-theme 'modus-operandi :no-confirm)

    ;; Add frame borders and window dividers
    (modify-all-frames-parameters
     '((internal-border-width . 20)))
    (dolist (face '(window-divider
		    window-divider-first-pixel
		    window-divider-last-pixel))
      (face-spec-reset-face face)
      (set-face-foreground face (face-attribute 'default :background)))
    (set-face-background 'fringe (face-attribute 'default :background)))
#+END_SRC
**** nerd-icons
A Library for Nerd Font icons. Required for modline icons.
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons)
#+END_SRC
**** all-the-icons

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

**** doom-modeline
A fancy and fast mode-line inspired by minimalism design.
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    ;; If non-nil, cause imenu to see `doom-modeline' declarations.
    ;; This is done by adjusting `lisp-imenu-generic-expression' to
    ;; include support for finding `doom-modeline-def-*' forms.
    ;; Must be set before loading doom-modeline.
    (setq doom-modeline-support-imenu t)

    :config
    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (setq doom-modeline-height 20)

    ;; display the real names, please put this into your init file.
    (setq find-file-visit-truename t)

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (setq doom-modeline-hud t)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (if (display-graphic-p)
	(setq doom-modeline-icon t))

    ;; If non-nil, only display one number for checker information if applicable.
    (setq doom-modeline-checker-simple-format t)

    :hook
    (emacs-startup . doom-modeline-mode))
#+END_SRC
**** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :init
    ;; Content is not centered by default. To center, set
    (setq dashboard-center-content t)

    ;; display an alternative emacs logo
    (setq dashboard-startup-banner 'logo)

    ;; To disable shortcut "jump" indicators for each section, set
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-projects-backend 'project-el)
    (setq dashboard-items '((recents  . 10)
			    (projects . 10)))
    (setq dashboard-icon-type 'all-the-icons) ;; use `all-the-icons' package
    (if (display-graphic-p)
	(setq dashboard-display-icons-p t ;; display icons on both GUI and terminal
	      dashboard-set-heading-icons t
	      dashboard-set-file-icons t))
    (setq dashboard-set-navigator t) ;; show navigator below the banner:
    (setq dashboard-set-footer nil) ;; disable footer
    :hook
    (after-init . dashboard-setup-startup-hook))
#+end_src
**** ascii-art-to-unicode
Make org-brain-visualize-mode look a bit nicer.
#+begin_src emacs-lisp
  (use-package ascii-art-to-unicode
    :after org-brain
    :config
    (defface aa2u-face '((t . nil))
      "Face for aa2u box drawing characters")
    (advice-add #'aa2u-1c :filter-return
		(lambda (str) (propertize str 'face 'aa2u-face)))
    (defun aa2u-org-brain-buffer ()
      (let ((inhibit-read-only t))
	(make-local-variable 'face-remapping-alist)
	(add-to-list 'face-remapping-alist
		     '(aa2u-face . org-brain-wires))
	(ignore-errors (aa2u (point-min) (point-max)))))
    :hook
    (org-brain-after-visualize . aa2u-org-brain-buffer))
#+end_src

**** Ligatures
#+BEGIN_SRC emacs-lisp
  (use-package ligature
    :config
    ;; set Fira as default font
    (set-frame-font "Fira Code Light-10" nil t)
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures '(eww-mode org-mode) '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures '(prog-mode org-mode)
			    '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
			      ;; =:= =!=
			      ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
			      ;; ;; ;;;
			      (";" (rx (+ ";")))
			      ;; && &&&
			      ("&" (rx (+ "&")))
			      ;; !! !!! !. !: !!. != !== !~
			      ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
			      ;; ?? ??? ?:  ?=  ?.
			      ("?" (rx (or ":" "=" "\." (+ "?"))))
			      ;; %% %%%
			      ("%" (rx (+ "%")))
			      ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
			      ;; |->>-||-<<-| |- |== ||=||
			      ;; |==>>==<<==<=>==//==/=!==:===>
			      ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
					      "-" "=" ))))
			      ;; \\ \\\ \/
			      ("\\" (rx (or "/" (+ "\\"))))
			      ;; ++ +++ ++++ +>
			      ("+" (rx (or ">" (+ "+"))))
			      ;; :: ::: :::: :> :< := :// ::=
			      (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
			      ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
			      ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
					      "="))))
			      ;; .. ... .... .= .- .? ..= ..<
			      ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
			      ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
			      ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
			      ;; *> */ *)  ** *** ****
			      ("*" (rx (or ">" "/" ")" (+ "*"))))
			      ;; www wwww
			      ("w" (rx (+ "w")))
			      ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
			      ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
			      ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
			      ;; << <<< <<<<
			      ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
					      "-"  "/" "|" "="))))
			      ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
			      ;; >> >>> >>>>
			      (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
			      ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
			      ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
					   (+ "#"))))
			      ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
			      ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
			      ;; __ ___ ____ _|_ __|____|_
			      ("_" (rx (+ (or "_" "|"))))
			      ;; Fira code: 0xFF 0x12
			      ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
			      ;; Fira code:
			      "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
			      ;; The few not covered by the regexps.
			      "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    :hook
    (after-init . global-ligature-mode))
#+END_SRC
**** visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :bind (:map my/toggle-map ("w" . visual-fill-column-mode)))
#+end_src
**** writeroom-mode
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :bind (:map my/toggle-map ("z" . writeroom-mode)))
#+end_src
**** golden-ratio
When working with many windows at the same time, each window has a size that is not convenient for editing.
#+begin_src emacs-lisp
  (use-package golden-ratio
    :custom
    (golden-ratio-exclude-modes '(speedbar-mode))
    :config
    (setq golden-ratio-auto-scale t)
    :hook
    (after-init . golden-ratio-mode))
#+end_src
*** Org
**** Org
Let's include a newer version of org-mode than the one that is built in. We're going
to manually remove the org directories from the load path, to ensure the version we
want is prioritized instead.

Agenda view and task management has been inspired by https://github.com/rougier/emacs-gtd

#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " â¾"
	  org-src-fontify-natively t
	  org-fontify-quote-and-verse-blocks t
	  org-src-tab-acts-natively t
	  org-edit-src-content-indentation 2
	  org-hide-block-startup nil
	  org-src-preserve-indentation nil
	  ;; Return or left-click with mouse follows link
	  org-return-follows-link t
	  org-mouse-1-follows-link t
	  ;; Display links as the description provided
	  org-link-descriptive t)

    ;; Todo
    (setq org-todo-keywords
	  '((sequence
	     "PROJ(p)"  ; A project, which usually contains other tasks
	     "TODO(t)"  ; A task that needs doing & is ready to do
	     "NEXT(n)"  ; Next task in a project
	     "STRT(s)"  ; A task that is in progress
	     "WAIT(w)"  ; Something external is holding up this task
	     "HOLD(h)"  ; This task is paused/on hold because of me
	     "|"
	     "DONE(d)"  ; Task successfully completed
	     "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
	    (sequence
	     "[ ](T)"   ; A task that needs doing
	     "[-](S)"   ; Task is in progress
	     "[?](W)"   ; Task is being held up or paused
	     "|"
	     "[X](D)")) ; Task was completed
	  org-todo-keyword-faces
	  '(("[-]"  . +org-todo-active)
	    ("STRT" . +org-todo-active)
	    ("[?]"  . +org-todo-onhold)
	    ("WAIT" . +org-todo-onhold)
	    ("HOLD" . +org-todo-onhold)
	    ("PROJ" . +org-todo-project)))

    ;; https://github.com/rougier/emacs-gtd#activating-tasks
    (defun my/log-todo-next-creation-date (&rest ignore)
      "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
      (when (and (string= (org-get-todo-state) "NEXT")
		 (not (org-entry-get nil "ACTIVATED")))
	(org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
    (add-hook 'org-after-todo-state-change-hook #'my/log-todo-next-creation-date)

    ;; Add timstamp to items when done
    (setq org-log-done 'time)

    ;; Agenda
    (setq org-agenda-files
	  (mapcar 'file-truename
		  (file-expand-wildcards (concat org-directory "agenda/*.org"))))

    ;; Agenda
    (setq org-agenda-custom-commands
	  '(("g" "Get Things Done (GTD)"
	     ((agenda ""
		      ((org-agenda-span 'day)
		       (org-agenda-start-day "today")
		       (org-agenda-skip-function
			'(org-agenda-skip-entry-if 'deadline))
		       (org-deadline-warning-days 0)))
	      (todo "PROJ"
		    ((org-agenda-skip-function
		      '(org-agenda-skip-subtree-if 'nottodo '("NEXT" "STRT")))
		     (org-agenda-overriding-header "Active Projects:")))
	      (todo "STRT"
		    ((org-agenda-skip-function
		      '(org-agenda-skip-entry-if 'deadline))
		     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
		     (org-agenda-prefix-format "  %i %-12:c [%e] ")
		     (org-agenda-overriding-header "\nActive Tasks\n")
		     ))  ; Exclude entries with LITERATURE category
	      (todo "NEXT"
		    ((org-agenda-skip-function
		      '(org-agenda-skip-entry-if 'deadline))
		     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
		     (org-agenda-prefix-format "  %i %-12:c [%e] ")
		     (org-agenda-overriding-header "\nNext Tasks\n")))
	      (agenda nil
		      ((org-agenda-entry-types '(:deadline))
		       (org-agenda-format-date "")
		       (org-deadline-warning-days 7)
		       (org-agenda-skip-function
			'(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
		       (org-agenda-overriding-header "\nDeadlines")))
	      (tags-todo "inbox"
			 ((org-agenda-prefix-format "  %?-12t% s")
			  (org-agenda-overriding-header "\nInbox\n")))
	      (todo "HOLD|WAIT"
		    ((org-agenda-skip-function
		      '(org-agenda-skip-entry-if 'deadline))
		     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
		     (org-agenda-prefix-format "  %i %-12:c [%e] ")
		     (org-agenda-overriding-header "\nPaused Tasks\n")))
	      (tags "CLOSED>=\"<today>\""
		    ((org-agenda-overriding-header "\nCompleted today\n"))))
	     ((org-agenda-category-filter-preset '("-LITERATURE"))))
	    ("l" "Literature" tags-todo "literature"
	     ((org-agenda-sorting-strategy '(priority-down category-keep effort-up))
	      (org-agenda-prefix-format "  %i %-12:c [%e] ")))))

    ;; Capture
    (setq org-capture-templates
	  `(("i" "Inbox" entry  (file "agenda/inbox.org")
	     ,(concat "* TODO %?\n"
		      "/Entered on/ %U"))
	    ("m" "Meeting" entry  (file+headline "agenda/agenda.org" "Future")
	     ,(concat "* %? :meeting:\n"
		      "<%<%Y-%m-%d %a %H:00>>"))
	    ("n" "Note" entry  (file "agenda/notes.org")
	     ,(concat "* Note (%a)\n"
		      "/Entered on/ %U\n" "\n" "%?"))))

    ;; Refile and Archive
    (setq org-refile-use-outline-path 'file
	  org-outline-path-complete-in-steps nil
	  org-refile-targets `((,(expand-file-name  "agenda/agenda.org" org-directory) :maxlevel . 3)
			       (,(expand-file-name  "agenda/projects.org" org-directory) :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
			       (,(expand-file-name  "agenda/literature.org" org-directory) :maxlevel . 2)
			       (,(expand-file-name  "agenda/scheduled.org" org-directory) :maxlevel . 2)))
    ;; Save the corresponding buffers
    (defun my/gtd-save-org-buffers ()
      "Save `org-agenda-files' buffers without user confirmation.
	    See also `org-save-all-org-buffers'"
      (interactive)
      (message "Saving org-agenda-files buffers...")
      (save-some-buffers t (lambda ()
			     (when (member (buffer-file-name) org-agenda-files)
			       t)))
      (message "Saving org-agenda-files buffers... done"))

    ;; Add it after refile
    (advice-add 'org-refile :after
		(lambda (&rest _)
		  (my/gtd-save-org-buffers)))

    ;; archive all DONE tasks in subtree
    ;; https://stackoverflow.com/questions/6997387
    (defun org-archive-done-tasks ()
      (interactive)
      (org-map-entries
       (lambda ()
	 (org-archive-subtree)
	 (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
       "/DONE" 'tree))

    ;; Org LaTeX support
    ;; https://orgmode.org/manual/LaTeX-specific-export-settings.html
    (add-to-list 'org-latex-packages-alist
		 '("AUTO" "babel" t ("pdflatex")))
    (add-to-list 'org-latex-packages-alist
		 '("AUTO" "polyglossia" t ("xelatex" "lualatex")))

    (with-eval-after-load 'ox-latex
      ;; Support for KOMA script article class
      ;; https://orgmode.org/worg/org-tutorials/org-latex-export.html#org3ed51b6
      (add-to-list 'org-latex-classes
		   '("koma-article"
		     "\\documentclass{scrartcl}"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      (add-to-list 'org-latex-classes
		   '("koma-letter"
		     "\\documentclass{scrlttr2}"
		     ("\\section{%s}" . "\\section*{%s}")
		     ("\\subsection{%s}" . "\\subsection*{%s}")
		     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		     ("\\paragraph{%s}" . "\\paragraph*{%s}")
		     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

    (with-eval-after-load 'ox-beamer
      (add-to-list 'org-beamer-environments-extra
		   '("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}")))

    (with-eval-after-load 'ox-extra
      (ox-extras-activate '(ignore-headlines)))
    :bind
    (:map my/open-map
	  ("a" . org-agenda)
	  :map my/leader-map
	  ("c" . org-capture)))
#+END_SRC
**** org-auto-tangle
#+BEGIN_SRC emacs-lisp
  (use-package org-auto-tangle
    :after org
    :hook (org-mode . org-auto-tangle-mode))
#+END_SRC
**** org-appear
*test* /aaa/ =babab=
#+begin_src emacs-lisp
  (use-package org-appear
    :after org
    :hook (org-mode . org-appear-mode))
#+end_src

**** org-noter

#+begin_src emacs-lisp
  (use-package org-noter
    :after org
    :config
    (setq
     ;; The WM can handle splits
     ;; org-noter-notes-window-location 'other-frame
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil
     ;; Everything is relative to the main notes file
     ;; org-noter-notes-search-path (list bibtex-completion-notes-path)
     org-noter-highlight-selected-text t)
    :hook
    ;; Org-noterâs purpose is to let you create notes that are kept in sync when
    ;; you scroll through the [PDF etc] document
    (org-noter-insert-heading . org-id-get-create))
#+end_src

**** org-brain
#+begin_src emacs-lisp
  (use-package org-brain
    :after org org-noter
    :init
    ;; from org brain README
    ;; Hereâs a command which uses org-cliplink to add a link from the clipboard
    ;; as an org-brain resource.
    ;; It guesses the description from the URL title.
    ;; Here Iâve bound it to L in org-brain-visualize.
    (defun org-brain-cliplink-resource ()
      "Add a URL from the clipboard as an org-brain resource.
    Suggest the URL title as a description for resource."
      (interactive)
      (let ((url (org-cliplink-clipboard-content)))
	(org-brain-add-resource
	 url
	 (org-cliplink-retrieve-title-synchronously url)
	 t)))

    (defun org-brain-open-org-noter (entry)
      "Open `org-noter' on the ENTRY.
    If run interactively, get ENTRY from context."
      (interactive (list (org-brain-entry-at-pt)))
      (org-with-point-at (org-brain-entry-marker entry)
	(org-noter)))

    (defun org-brain-insert-resource-icon (link)
      "Insert an icon, based on content of org-mode LINK."
      (insert (format "%s "
		      (cond ((string-prefix-p "brain:" link)
			     (all-the-icons-fileicon "brain"))
			    ((string-prefix-p "info:" link)
			     (all-the-icons-octicon "info"))
			    ((string-prefix-p "help:" link)
			     (all-the-icons-material "help"))
			    ((string-prefix-p "http" link)
			     (all-the-icons-icon-for-url link))
			    (t
			     (all-the-icons-icon-for-file link))))))

    ;; Allows you to edit entries directly from org-brain-visualize
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 24)
    (setq org-brain-include-file-entries t
	  org-brain-file-entries-use-title t)
    (add-hook 'org-brain-after-resource-button-functions #'org-brain-insert-resource-icon)
    ;;:bind (:map org-brain-visualize-mode-map
    ;;      "L" . org-brain-cliplink-resource
    ;;      "C-c n" . org-brain-open-org-noter)
    :commands
    (org-brain-visualize)
    :hook
    ;; (org-brain-visualize-mode . org-brain-polymode)
    (before-save . org-brain-ensure-ids-in-buffer))
#+end_src

**** toc-org
Let's install and load the =toc-org= package after org mode is loaded. This is the
package that automatically generates an up to date table of contents for us.

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :after org
    :hook
    (org-mode . toc-org-enable))
#+END_SRC

**** org-cliplink
A simple command that takes a URL from the clipboard and inserts an org-mode link with a title of a page found by the URL into the current buffer.

#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :after org)
#+END_SRC

**** org-modern
This package implements a modern style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks.

#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :hook (org-mode . global-org-modern-mode)
    ;;:after org
    :custom
    (org-modern-star '("â" "â" "â"))
    :config
    (setq org-modern-label-border 0.3)

    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     ;; org-ellipsis " â¾"

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?â
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " âââââ " "âââââââââââââââ")
     org-agenda-current-time-string
     "â­  now âââââââââââââââââââââââââââââââââââââââââââââââââ"))
#+END_src
*** Tools
**** Server

Server start.

#+begin_src emacs-lisp :tangle no
  (use-package server
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src
**** tramp
remote file editing through ssh/scp.
#+begin_src emacs-lisp
  (use-package tramp
    :straight nil
    :custom
    (setq tramp-default-method "ssh")
    (setq tramp-encoding-shell "/usr/bin/zsh")
    :config
    ;;(setq tramp-verbose 1)
    (setq remote-file-name-inhibit-cache nil)
    (setq vc-ignore-dir-regexp
	  (format "%s\\|%s"
		  vc-ignore-dir-regexp
		  tramp-file-name-regexp))
    (add-to-list 'tramp-connection-properties
		 (list (regexp-quote "/sshx:user@host:")
		       "remote-shell" "/bin/bash")))
#+end_src
**** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.
It is a bit slow to load so we do need load it explicitely.

#+begin_src emacs-lisp
  (use-package helpful
    :bind
    (([remap describe-function] . helpful-function)
     ([remap describe-symbol] . helpful-symbol)
     ([remap describe-variable] . helpful-variable)
     ([remap describe-command] . helpful-command)
     ([remap describe-key] . helpful-key)
     ("C-h K" . describe-keymap)
     :map helpful-mode-map
     ([remap revert-buffer] . helpful-update)))
#+end_src
**** vundo
#+begin_src emacs-lisp
  (use-package vundo
    :bind
    (:map my/open-map
	  ("u". vundo))
    :config
    (when (display-graphic-p)
      (setq vundo-glyph-alist vundo-unicode-symbols)))
#+end_src
**** Recent files

50 Recents files with some exclusion (regex patterns).

#+begin_src emacs-lisp
  (use-package recentf
    :config
    (add-to-list 'recentf-exclude
		 (recentf-expand-file-name no-littering-var-directory))
    (setq recentf-keep '(file-remote-p file-readable-p))
    (setq recentf-max-menu-items 10
	  recentf-max-saved-items 100)
    :bind
    (:map my/open-map
	  ("r" . recentf-open-file))
    :hook
    (after-init . recentf-mode))
#+end_src
**** Savehist
#+begin_src emacs-lisp
  (use-package savehist
    :config
    (setq kill-ring-max 50
	  history-length 50)

    (setq savehist-additional-variables
	  '(kill-ring
	    command-history
	    set-variable-value-history
	    custom-variable-history
	    query-replace-history
	    read-expression-history
	    minibuffer-history
	    read-char-history
	    face-name-history
	    bookmark-history
	    file-name-history))

    (put 'minibuffer-history         'history-length 50)
    (put 'file-name-history          'history-length 50)
    (put 'set-variable-value-history 'history-length 25)
    (put 'custom-variable-history    'history-length 25)
    (put 'query-replace-history      'history-length 25)
    (put 'read-expression-history    'history-length 25)
    (put 'read-char-history          'history-length 25)
    (put 'face-name-history          'history-length 25)
    (put 'bookmark-history           'history-length 25)

    ;; No duplicates in history
    (setq history-delete-duplicates t)

    :hook
    ;;Start history mode.
    (after-init . savehist-mode))
#+end_src

**** PDF Tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install :no-query)

    (setq pdf-view-use-scaling t
	  pdf-view-use-imagemagick nil))
#+end_src

**** Exec Path From Shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (defun my/copy-ssh-env ()
      (exec-path-from-shell-copy-env "SSH_AGENT_PID")
      (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
      (exec-path-from-shell-initialize))
    :hook
    (magit-credential . my/copy-ssh-env))
#+end_src

**** Highlighting current line

Highlighting of the current line (native mode)

#+begin_src emacs-lisp
  (use-package hl-line
    :hook
    ((prog-mode org-mode) . global-hl-line-mode))
#+end_src

**** Parenthesis
Paren mode for highlighting matcing paranthesis

#+begin_src emacs-lisp
  (use-package paren
    :config
    ;; (setq show-paren-style 'expression)
    (setq show-paren-style 'parenthesis)
    (setq show-paren-when-point-in-periphery t)
    (setq show-paren-when-point-inside-paren nil)
    :hook
    (prog-mode . show-paren-mode))
#+end_src

**** ChatGPT
#+begin_src emacs-lisp
  (use-package gptel
    :config
    (setq gptel-default-mode 'org-mode)
    :bind
    (:map my/open-map
	  ("c". gptel))
    :commands (gptel gptel-send))
#+end_src

**** ediff
The ediff package is utilized to handle file differences in emacs.
We will tweak the Emacs built-in ediff configuration a bit.
[[https://panadestein.github.io/emacsd/#org5917c00][Emacs literate configuration]]

#+begin_src emacs-lisp
  (use-package ediff
    :config
    (defvar my-ediff-original-windows nil)
    (defun my-store-pre-ediff-winconfig ()
      "This function stores the current window configuration before opening ediff."
      (setq my-ediff-original-windows (current-window-configuration)))
    (defun my-restore-pre-ediff-winconfig ()
      "This function resets the original window arrangement."
      (set-window-configuration my-ediff-original-windows))
    :hook
    ((ediff-before-setup . my-store-pre-ediff-winconfig)
     (ediff-quit . my-restore-pre-ediff-winconfig))
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain
	  ediff-split-window-function 'split-window-horizontally))
#+end_src

**** flyspell
#+begin_src emacs-lisp
  (use-package flyspell
    :straight nil
    :config
    (defun my/restart-flyspell-mode ()
      (when flyspell-mode
	(flyspell-mode-off)
	(flyspell-mode-on)))
    :hook
    (((text-mode conf-mode org-mode) . flyspell-mode)
     (prog-mode . flyspell-prog-mode)
     (ispell-change-dictionary . restart-flyspell-mode)))

  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)
		:map flyspell-mouse-map ("RET" . flyspell-correct-at-point)
		([mouse-1] . flyspell-correct-at-point)))
#+end_src

**** elfeed
An Emacs web feeds client 
#+begin_src emacs-lisp
  (use-package elfeed
    :bind
    (:map my/open-map
	  ("f" . elfeed))
    :config
    (setq elfeed-feeds
	  '("https://github.com/domtronn/all-the-icons.el/releases.atom"
	    "https://github.com/emacs-straight/ascii-art-to-unicode/releases.atom"
	    "https://github.com/emacs-straight/auctex/releases.atom"
	    "https://github.com/dholm/benchmark-init-el/releases.atom"
	    "https://github.com/elken/cape-yasnippet/releases.atom"
	    "https://github.com/minad/cape/releases.atom"
	    "https://github.com/emacs-citar/citar/releases.atom"
	    "https://github.com/andras-simonyi/citeproc-el/releases.atom"
	    "https://github.com/emacs-straight/compat/releases.atom"
	    "https://github.com/necaris/conda.el/releases.atom"
	    "https://github.com/minad/consult/releases.atom"
	    "https://codeberg.org/akib/emacs-corfu-terminal/releases.atom"
	    "https://github.com/emacs-straight/corfu/releases.atom"
	    "https://github.com/magnars/dash.el/releases.atom"
	    "https://github.com/seagle0128/doom-modeline/releases.atom"
	    "https://github.com/emacs-straight/eglot/releases.atom"
	    "https://github.com/dimitri/el-get/releases.atom"
	    "https://github.com/emacs-straight/eldoc/releases.atom"
	    "https://github.com/Wilfred/elisp-refs/releases.atom"
	    "https://github.com/emacs-tree-sitter/elisp-tree-sitter/releases.atom"
	    "https://github.com/jwiegley/emacs-async/releases.atom"
	    "https://github.com/emacs-dashboard/emacs-dashboard/releases.atom"
	    "https://github.com/lassik/emacs-format-all-the-code/releases.atom"
	    "https://github.com/lassik/emacs-language-id/releases.atom"
	    "https://github.com/justbur/emacs-which-key/releases.atom"
	    "https://github.com/emacs-straight/emacsmirror-mirror/releases.atom"
	    "https://github.com/oantolin/embark/releases.atom"
	    "https://github.com/cask/epl/releases.atom"
	    "https://github.com/Somelauw/evil-org-mode/releases.atom"
	    "https://github.com/emacs-evil/evil/releases.atom"
	    "https://github.com/emacs-straight/external-completion/releases.atom"
	    "https://github.com/rejeep/f.el/releases.atom"
	    "https://github.com/flycheck/flycheck/releases.atom"
	    "https://github.com/emacs-straight/flymake/releases.atom"
	    "https://github.com/d12frosted/flyspell-correct/releases.atom"
	    "https://github.com/nschum/fringe-helper.el/releases.atom"
	    "https://github.com/nonsequitur/git-gutter-fringe-plus/releases.atom"
	    "https://github.com/emacsorphanage/git-gutter-fringe/releases.atom"
	    "https://github.com/nonsequitur/git-gutter-plus/releases.atom"
	    "https://github.com/emacsorphanage/git-gutter/releases.atom"
	    "https://codeberg.org/pidu/git-timemachine/releases.atom"
	    "https://github.com/emacs-straight/gnu-elpa-mirror/releases.atom"
	    "https://github.com/roman/golden-ratio.el/releases.atom"
	    "https://github.com/emacs-evil/goto-chg/releases.atom"
	    "https://github.com/karthink/gptel/releases.atom"
	    "https://github.com/Wilfred/helpful/releases.atom"
	    "https://github.com/purcell/inheritenv/releases.atom"
	    "https://github.com/emacs-straight/jsonrpc/releases.atom"
	    "https://github.com/emacs-straight/let-alist/releases.atom"
	    "https://github.com/mickeynp/ligature.el/releases.atom"
	    "https://github.com/immerrr/lua-mode/releases.atom"
	    "https://github.com/magit/magit/releases.atom"
	    "https://github.com/minad/marginalia/releases.atom"
	    "https://github.com/jrblevin/markdown-mode/releases.atom"
	    "https://github.com/melpa/melpa/releases.atom"
	    "https://github.com/meow-edit/meow/releases.atom"
	    "https://github.com/protesilaos/modus-themes/releases.atom"
	    "https://github.com/rainstormstudio/nerd-icons.el/releases.atom"
	    "https://github.com/emacscollective/no-littering/releases.atom"
	    "https://github.com/douglasdavis/numpydoc.el/releases.atom"
	    "https://github.com/oantolin/orderless/releases.atom"
	    "https://github.com/awth13/org-appear/releases.atom"
	    "https://github.com/yilkalargaw/org-auto-tangle/releases.atom"
	    "https://github.com/Kungsgeten/org-brain/releases.atom"
	    "https://github.com/rexim/org-cliplink/releases.atom"
	    "https://github.com/minad/org-modern/releases.atom"
	    "https://github.com/org-noter/org-noter/releases.atom"
	    "https://github.com/emacs-straight/org-mode/releases.atom"
	    "https://github.com/joostkremers/parsebib/releases.atom"
	    "https://github.com/vedang/pdf-tools/releases.atom"
	    "https://github.com/emacsorphanage/pkg-info/releases.atom"
	    "https://codeberg.org/akib/emacs-popon/releases.atom"
	    "https://github.com/kcyarn/pretty-speedbar/releases.atom"
	    "https://github.com/fritzgrabo/project-tab-groups/releases.atom"
	    "https://github.com/emacs-straight/project/releases.atom"
	    "https://github.com/paetzke/py-isort.el/releases.atom"
	    "https://github.com/Wilfred/pyimport/releases.atom"
	    "https://github.com/pythonic-emacs/pythonic/releases.atom"
	    "https://github.com/emacs-straight/queue/releases.atom"
	    "https://github.com/magnars/s.el/releases.atom"
	    "https://github.com/cask/shut-up/releases.atom"
	    "https://github.com/emacsorphanage/sr-speedbar/releases.atom"
	    "https://github.com/radian-software/straight.el/releases.atom"
	    "https://github.com/akicho8/string-inflection/releases.atom"
	    "https://github.com/fritzgrabo/tab-bar-echo-area/releases.atom"
	    "https://github.com/emacsorphanage/tablist/releases.atom"
	    "https://github.com/Crandel/tempel-collection/releases.atom"
	    "https://github.com/minad/tempel/releases.atom"
	    "https://github.com/snosov1/toc-org/releases.atom"
	    "https://github.com/emacs-straight/tramp/releases.atom"
	    "https://github.com/magit/transient/releases.atom"
	    "https://github.com/emacs-tree-sitter/tree-sitter-langs/releases.atom"
	    "https://github.com/emacs-straight/undo-tree/releases.atom"
	    "https://github.com/jwiegley/use-package/releases.atom"
	    "https://github.com/emacs-straight/vertico/releases.atom"
	    "https://codeberg.org/joostkremers/visual-fill-column/releases.atom"
	    "https://github.com/emacs-straight/vundo/releases.atom"
	    "https://github.com/magit/with-editor/releases.atom"
	    "https://github.com/joostkremers/writeroom-mode/releases.atom"
	    "https://github.com/emacs-straight/xref/releases.atom"
	    "https://github.com/yoshiki/yaml-mode/releases.atom"
	    "https://github.com/AndreaCrotti/yasnippet-snippets/releases.atom"
	    "https://github.com/joaotavora/yasnippet/releases.atom"
	    "https://github.com/zenlang/zen-mode/releases.atom")))
#+end_src
*** Completion
**** Vertico
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system.

#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :config
    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)

    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
	  #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)


    ;; Straight and Package bundle the vertico package differently. When
    ;; using `package.el', the extensions are built into the package and
    ;; available on the load-path. When using `straight.el', the
    ;; extensions are not built into the package, so have to add that path
    ;; to the load-path manually to enable the following require.
    (when (fboundp 'straight-use-package)
      (add-to-list 'load-path
		   (expand-file-name "straight/build/vertico/extensions"
				     straight-base-dir)))
    (require 'vertico-directory)

    ;; enable vertico
    :hook
    (after-init . vertico-mode))
#+end_src

**** Marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+END_SRC

**** orderless
Emacs completion style that matches multiple regexps in any order
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :after vertico
    :init
    ;; In combination with Orderless or other non-prefix completion styles like substring or flex,
    ;; host names and user names are not made available for completion after entering /ssh:.
    (defun basic-remote-try-completion (string table pred point)
      (and (vertico--remote-p string)
	   (completion-basic-try-completion string table pred point)))
    (defun basic-remote-all-completions (string table pred point)
      (and (vertico--remote-p string)
	   (completion-basic-all-completions string table pred point)))
    (add-to-list
     'completion-styles-alist
     '(basic-remote basic-remote-try-completion basic-remote-all-completions nil))

    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
	  completion-category-defaults nil
	  completion-category-overrides '((file (styles basic-remote partial-completion)))))
#+END_SRC
**** Embark
Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers.
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ;; ("C-:" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none))))

    ;; The built-in embark-verbose-indicator displays actions in a buffer along with their keybindings and the first line of their docstrings.
    ;; Users desiring a more compact display can use which-key instead with the following configuration:
    ;; ref.: https://github.com/oantolin/embark/wiki/Additional-Configuration#use-which-key-like-a-key-menu-prompt
    (with-eval-after-load 'which-key
      (defun embark-which-key-indicator ()
	"An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
	(lambda (&optional keymap targets prefix)
	  (if (null keymap)
	      (which-key--hide-popup-ignore-command)
	    (which-key--show-keymap
	     (if (eq (plist-get (car targets) :type) 'embark-become)
		 "Become"
	       (format "Act on %s '%s'%s"
		       (plist-get (car targets) :type)
		       (embark--truncate-target (plist-get (car targets) :target))
		       (if (cdr targets) "â¦" "")))
	     (if prefix
		 (pcase (lookup-key keymap prefix 'accept-default)
		   ((and (pred keymapp) km) km)
		   (_ (key-binding prefix 'accept-default)))
	       keymap)
	     nil nil t (lambda (binding)
			 (not (string-suffix-p "-argument" (cdr binding))))))))

      (setq embark-indicators
	    '(embark-which-key-indicator
	      embark-highlight-indicator
	      embark-isearch-highlight-indicator))

      (defun embark-hide-which-key-indicator (fn &rest args)
	"Hide the which-key indicator immediately when using the completing-read prompter."
	(which-key--hide-popup-ignore-command)
	(let ((embark-indicators
	       (remq #'embark-which-key-indicator embark-indicators)))
	  (apply fn args)))

      (advice-add #'embark-completing-read-prompter
		  :around #'embark-hide-which-key-indicator)))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

**** Consult
additional featureful completion commands
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :functions
    (consult-theme consult-ripgrep consult-git-grep consult-grep
		   consult-bookmark consult-recent-file consult-xref
		   consult--source-bookmark consult--source-file-register
		   consult--source-recent-file consult--source-project-recent-file
		   consult-register-window consult-register-format)

    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (([remap Info-search] . consult-info)
	   ([remap recentf-open-files] . consult-recent-file)
	   ([remap bookmark-jump]                 . consult-bookmark)
	   ([remap goto-line]                     . consult-goto-line)
	   ([remap imenu]                         . consult-imenu)
	   ([remap locate]                        . consult-locate)
	   ([remap load-theme]                    . consult-theme)
	   ([remap man]                           . consult-man)
	   ([remap recentf-open-files]            . consult-recent-file)
	   ([remap switch-to-buffer]              . consult-buffer)
	   ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
	   ([remap switch-to-buffer-other-frame]  . consult-buffer-other-frame)
	   ([remap yank-pop]                      . consult-yank-pop)
	   ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	   :map my/buffer-map
	   ("b" . consult-buffer)                ;; orig. switch-to-buffer
	   ("w" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	   ("f" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	   :map project-prefix-map
	   ("b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	   :map goto-map
	   ;; M-g bindings in `goto-map'
	   ("e" . consult-compile-error)
	   ("f" . consult-flymake)               ;; Alternative: consult-flycheck
	   ("g" . consult-goto-line)             ;; orig. goto-line
	   ("o" . consult-outline)               ;; Alternative: consult-org-heading
	   ("m" . consult-mark)
	   ("k" . consult-global-mark)
	   ("i" . consult-imenu)
	   ("I" . consult-imenu-multi)
	   :map search-map
	   ("d" . consult-find)
	   ("D" . consult-locate)
	   ("g" . consult-grep)
	   ("G" . consult-git-grep)
	   ("r" . consult-ripgrep)
	   ("l" . consult-line)
	   ("L" . consult-line-multi)
	   ("k" . consult-keep-lines)
	   ("u" . consult-focus-lines)
	   ;; Isearch integration
	   ("e" . consult-isearch-history)
	   :map isearch-mode-map
	   ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	   ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	   ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	   ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	   ;; Minibuffer history
	   :map minibuffer-local-map
	   ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	   ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    ;; :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Configure a different project root function.
    (with-eval-after-load 'projectile
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-function (lambda (_) (projectile-project-root)))))
#+end_src
**** Corfu
Corfu is the minimalistic in-buffer completion counterpart of the Vertico minibuffer UI.
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    (setq read-extended-command-predicate
	  #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                  ;; Enable auto completion
    (corfu-auto-prefix 1)           ;; Complete with less prefix keys)
    (corfu-auto-delay 0.0)          ;; No delay for completion
    (corfu-echo-documentation 0.25) ;; Echo docs for current completion option
    (corfu-separator ?\s)           ;; Orderless field separator
    (corfu-quit-at-boundary nil)    ;; Never quit at completion boundary
    (corfu-quit-no-match t)         ;; Never quit, even if there is no match
    (corfu-preview-current t)       ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    (corfu-on-exact-match nil)      ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :config
    (when (fboundp 'straight-use-package)
      (add-to-list 'load-path
		   (expand-file-name "straight/build/corfu/extensions"
				     straight-base-dir)))
    (require 'corfu-popupinfo)

    (eldoc-add-command #'corfu-insert)

    ;; disable auto completion for eshell, such that the completion behavior is similar to widely used shells like Bash, Zsh or Fish.
    (add-hook 'eshell-mode-hook
	      (lambda ()
		(setq-local corfu-auto nil)
		(corfu-mode)))

    ;; fix uneeded duble return in eshell
    (defun corfu-send-shell (&rest _)
      "Send completion candidate when inside comint/eshell."
      (cond
       ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
	(eshell-send-input))
       ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
	(comint-send-input))))

    (advice-add #'corfu-insert :after #'corfu-send-shell)
    :hook
    ((after-init . global-corfu-mode)
     (after-init . corfu-popupinfo-mode)
     (eshell-mode-hook . (lambda ()
			   (setq-local corfu-auto nil)
			   (corfu-mode)))))
  (use-package corfu-terminal
    :if (display-graphic-p)
    :hook
    (after-init . corfu-terminal-mode))
#+END_SRC

**** Cape
Cape provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI. The completion backends used by completion-at-point are so called completion-at-point-functions (Capfs).
#+begin_src emacs-lisp
  (use-package cape
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (:map my/completion-map
		("p" . completion-at-point) ;; capf
		("t" . complete-tag)        ;; etags
		("d" . cape-dabbrev)        ;; or dabbrev-completion
		("h" . cape-history)
		("f" . cape-file)
		("k" . cape-keyword)
		("s" . cape-symbol)
		("a" . cape-abbrev)
		("l" . cape-line)
		("w" . cape-dict)
		("\\" . cape-tex)
		("_" . cape-tex)
		("^" . cape-tex)
		("&" . cape-sgml)
		("r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    ;; NOTE: The order matters!
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)

    ;; The advices are only needed on Emacs 28 and older.
    (when (< emacs-major-version 29)
      ;; Silence the pcomplete capf, no errors or messages!
      (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

      ;; Ensure that pcomplete does not write to the buffer
      ;; and behaves as a pure `completion-at-point-function'.
      (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)))
#+end_src

**** Tempel
Tempel is a tiny template package for Emacs, which uses the syntax of the Emacs Tempo library. Tempo is an ancient temple of the church of Emacs. It is 27 years old, but still in good shape since it successfully resisted change over the decades. However it may look a bit dusty here and there. Therefore we present Tempel, a new implementation of Tempo with inline expansion and integration with recent Emacs facilities. Tempel takes advantage of the standard completion-at-point-functions mechanism which is used by Emacs for in-buffer completion.

#+begin_src emacs-lisp
  ;; Configure Tempel
  (use-package tempel
    ;; Require trigger prefix before template name when completing.
    :custom
    (tempel-trigger-prefix ">")
    (tempel-path my/templates-path)

    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
	   ("M-*" . tempel-insert))

    :config
    ;; Setup completion at point
    (defun my/tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
		  (cons #'tempel-complete
			completion-at-point-functions)))

    :hook
    ((conf-mode . my/tempel-setup-capf)
     (prog-mode . my/tempel-setup-capf)
     (text-mode . my/tempel-setup-capf))
    ;; Optionally make the Tempel templates available to Abbrev,
    ;; either locally or globally. `expand-abbrev' is bound to C-x '.
    ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
    ;; (global-tempel-abbrev-mode)
    )

  ;; Optional: Add tempel-collection.
  ;; The package is young and doesn't have comprehensive coverage.
  (use-package tempel-collection)
#+end_src
**** Citar
Citar provides a highly-configurable completing-read front-end to browse and act on BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX, markdown, and org-cite editing support.
#+begin_src emacs-lisp
  (use-package citar
    :after all-the-icons embark org
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    :hook
    ((LaTeX-mode . citar-capf-setup)
     (org-mode . citar-capf-setup))
    :config
    (defvar citar-indicator-files-icons
      (citar-indicator-create
       :symbol (all-the-icons-faicon
		"file-o"
		:face 'all-the-icons-green
		:v-adjust -0.1)
       :function #'citar-has-files
       :padding "  " ; need this because the default padding is too low for these icons
       :tag "has:files"))
    (defvar citar-indicator-links-icons
      (citar-indicator-create
       :symbol (all-the-icons-octicon
		"link"
		:face 'all-the-icons-orange
		:v-adjust 0.01)
       :function #'citar-has-links
       :padding "  "
       :tag "has:links"))
    (defvar citar-indicator-notes-icons
      (citar-indicator-create
       :symbol (all-the-icons-material
		"speaker_notes"
		:face 'all-the-icons-blue
		:v-adjust -0.3)
       :function #'citar-has-notes
       :padding "  "
       :tag "has:notes"))
    (defvar citar-indicator-cited-icons
      (citar-indicator-create
       :symbol (all-the-icons-faicon
		"circle-o"
		:face 'all-the-icon-green)
       :function #'citar-is-cited
       :padding "  "
       :tag "is:cited"))
    (setq citar-at-point-function 'embark-act
	  citar-indicators
	  (list citar-indicator-files-icons
		citar-indicator-links-icons
		citar-indicator-notes-icons
		citar-indicator-cited-icons)
	  citar-notes-paths (list (concat org-directory "brain/bib_notes/"))
	  ctar-notes-template-multiple-files '(concat "#+TITLE: ${title}\n"
						      "#+AUTHOR: ${author editor}\n"
						      "#+DATE: ${date}\n"
						      "#+SOURCE: ${doi url}\n"
						      "#+CUSTOM_ID: ${=key= id}\n"
						      "#+cite_export: biblatex ieee\n"
						      (concat "#+bibliography: " (car citar-bibliography) "\n\n")
						      "* Notes :ignore:\n"
						      ":PROPERTIES:\n"
						      ":NOTER_DOCUMENT: ${file} \n"
						      ":END:\n\n"
						      "* Summary :childless:showchildren:export:\n"
						      "This is a summary of [citet:@${=key=}].\n"
						      "** Bibliography :ignore:\n"
						      )
	  citar-notes-template-one-file (concat "** TODO ${=key=}: ${title}, (${year}) :${type}:\n"
						":PROPERTIES:\n"
						":Custom_ID: ${=key=}\n"
						":FILE: [[file:${file}]]\n"
						":END:\n"
						"See [[cite:&${=key=}]]\n")
	  citar-templates `((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
			    (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
			    (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
			    (note . ,(eval ctar-notes-template-multiple-files)))
	  citar-symbol-separator "  ")

    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    ;;:bind
    ;;(:map org-mode-map :package org ("C-c b" . #'org-cite-insert))
    )
  (use-package citar-embark
    :after citar embark
    :hook
    (after-init . citar-embark-mode))
#+end_src

*** Version Control
**** Magit
The magical git client. Let's load magit only when one of the several entry pont
functions we invoke regularly outside of magit is called.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status magit-blame magit-log-buffer-file magit-log-all)
    :bind
    (:map my/version-control-map
	  ("F"  . magit-fetch-all)
	  ("P"  . magit-push-current)
	  ("b"  . magit-branch)
	  ("b"  . magit-branch-or-checkout)
	  ("c"  . magit-commit)
	  ("d"  . magit-diff-unstaged)
	  ("f"  . magit-fetch)
	  ("la" . magit-log-all)
	  ("lc" . magit-log-current)
	  ("lf" . magit-log-buffer-file)
	  ("p"  . magit-pull-branch)
	  ("v"  . magit-status)
	  ("r"  . magit-rebase)))
#+END_SRC
**** git-timemachine
#+begin_src emacs-lisp
  (use-package git-timemachine
    :bind
    (:map my/version-control-map
	  ("t" . git-timemachine)))
#+end_src
**** git-gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :demand t
    :custom
    (git-gutter:ask-p . nil)
    :config
    (setq git-gutter:disabled-modes '(fundamental-mode image-mode pdf-view-mode))
    ;; (setq git-gutter-fr:side 'right-fringe)
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom)

    ;;update interval for diff information
    (setq git-gutter:update-interval 0.5)

    ;; PERF: Only enable the backends that are available, so it doesn't have to
    ;;   check when opening each buffer.
    (setq git-gutter:handled-backends
	  (cons 'git (cl-remove-if-not #'executable-find (list 'hg 'svn 'bzr)
				       :key #'symbol-name)))
    :bind
    (:repeat-map my/git-gutter-repeat-map
		 ("n" . git-gutter:next-hunk)
		 ("p" . git-gutter:previous-hunk)
		 ("s" . git-gutter:stage-hunk)
		 ("d" . git-gutter:popup-hunk)
		 ("r" . git-gutter:revert-hunk)
		 :exit
		 ("c" . magit-commit-create))
    :hook
    ((after-init . global-git-gutter-mode)
     (focus-in . git-gutter:update-all-windows)))
#+END_SRC

*** Project Management
**** project-tab-groups
#+begin_src emacs-lisp
  (use-package tab-bar
    :straight nil
    :bind
    (:repeat-map my/workspace-map
		 ("p" . tab-previous)
		 ("n" . tab-next)
		 ("P" . tab-bar-move-tab-backward)
		 ("N". tab-bar-move-tab)
		 :exit
		 ("k" . tab-close-group))
    :config
    (tab-group "î¤¦")
    (setq tab-bar-close-button-show t
	  tab-bar-format '(tab-bar-format-history tab-bar-format-tabs-groups)
	  tab-bar-separator ""
	  tab-bar-close-button (propertize "Ã"
					   'close-tab t
					   'face 'tab-bar-tab-default
					   :help "Click to close tab"))
    (defun my/set-tab-faces ()
      (if (display-graphic-p)
	  (let ((bg (face-attribute 'default :background))
		(fg (face-attribute 'default :foreground))
		(base (face-attribute 'mode-line :background))
		(box-width (/ (line-pixel-height) 3)))
	    (set-face-attribute 'tab-bar-tab nil :foreground fg :background bg :weight 'normal :inherit nil :box (list :line-width box-width :color bg))
	    (set-face-attribute 'tab-bar-tab-inactive nil :foreground fg :background base :weight 'normal :inherit nil :box (list :line-width box-width :color base)))))
    (my/set-tab-faces)

    (defun my/tab-bar-tab-name-current-filter-return (str)
      (format " %s " str))
    (advice-add 'tab-bar-tab-name-current :filter-return #'my/tab-bar-tab-name-current-filter-return)

    (defun my/tab-bar-tab-group-default-filter-return (str)
      (format " %s " str))
    (advice-add 'tab-bar-tab-group-default :filter-return #'my/tab-bar-tab-group-default-filter-return)

    (defun my/tab-bar--format-tab-group-around (orig-fun tab i &optional current-p)
      (let ((color (face-attribute (if current-p
				       'mode-line-emphasis
				     'tab-bar-tab-group-inactive) :foreground)))
	(append (cons `(,(intern (format "group-sep-%i" i)) menu-item
			,(propertize " " 'face (list :height (if current-p 0.3 0.2)
						     :foreground color
						     :background color))
			ignore)
		      (funcall orig-fun tab i current-p))
		(when current-p (list`(,(intern (format "group-arrow-%i" i)) menu-item
				       ,(propertize "âµ" 'face 'tab-bar-tab-group-current)
				       ignore))))))
    (advice-add 'tab-bar--format-tab-group :around #'my/tab-bar--format-tab-group-around)

    :hook
    ((modus-themes-post-load . my/set-tab-faces)
     (after-init . tab-bar-mode)))
  (use-package project-tab-groups
    :after tab-bar
    :config
    (if (display-graphic-p)
	(setq tab-group-name-template "ï² %s"))

    ;; We need to update the provided advice for kill project buffers to find
    ;; the tab group with our custom format
    (defun my/project-tab-groups--project-kill-buffers-advice-overwrite (orig-fun &rest args)
      "Call ORIG-FUN with ARGS, then close the current tab group, if any."
      (when (apply orig-fun args)
	(when-let ((tab-group-name (funcall tab-bar-tab-group-function
					    (tab-bar--current-tab-find))))
	  (tab-bar-close-group-tabs tab-group-name))))

    (advice-add 'project-tab-groups--project-kill-buffers-advice :override 'my/project-tab-groups--project-kill-buffers-advice-overwrite)

    (with-eval-after-load 'tab-bar-echo-area
      (push #'project-switch-project tab-bar-echo-area-trigger-display-functions)
      (tab-bar-echo-area-apply-display-tab-names-advice))
    :hook (after-init . project-tab-groups-mode))
#+end_src
**** speedbar
#+begin_src emacs-lisp
  (use-package speedbar
    ;; :init
    ;; (defun my/svg-icon (text)
    ;;   "Generate an SVG icon with TEXT."
    ;;   (let ((svg (svg-create 20 20 :viewBox "0 0 512 512")))
    ;;     (svg-text svg text
    ;;               :font-size "450px"
    ;;               :fill (face-attribute 'default :foreground)
    ;;               :font-family "Symbols Nerd Font Mono"
    ;;               :x "50%" :y "450"
    ;;               :text-anchor "middle"
    ;;               :rendering "optimizeLegibility"
    ;;               :stroke-width 5)
    ;;     (svg-image svg :ascent 'center)))

    ;; (defmacro my/svg-ezimage (name text)
    ;;   (let ((img (cdr (my/svg-icon text))))
    ;;     `(defezimage ,name ,(list img) "")))

    ;; (defun my/define-speedbar-images ()
    ;;   (clear-image-cache)
    ;;   (my/svg-ezimage my/directory-plus "ï»")
    ;;   (my/svg-ezimage my/directory-minus "ï¼"))
    ;; (my/define-speedbar-images)
    :config
    ;; set some sane defaults, can be easily extended by user
    (setq speedbar-frame-parameters
	  '((name . "speedbar")
	    (title . "speedbar")
	    (minibuffer . nil)
	    (border-width . 2)
	    (menu-bar-lines . 0)
	    (tool-bar-lines . 0)
	    (unsplittable . t)
	    (left-fringe . 10)))

    ;; list of supported file-extensions
    ;; feel free to add to this list
    (speedbar-add-supported-extension
     (list
      ;; lua and fennel(lisp that transpiles to lua)
      ".lua"
      ".fnl"
      ".fennel"
      ;; shellscript
      ".sh"
      ".bash";;is this ever used?
      ;; web languages
      ;; Hyper-Text-markup-language(html) and php
      ".php"
      ".html"
      ".htm"
      ;; ecma(java/type)-script
      ".js"
      ".json"
      ".ts"
      ;; stylasheets
      ".css"
      ".less"
      ".scss"
      ".sass"
      ;; c/c++ and makefiles
      ".c"
      ".cpp"
      ".h"
      "makefile"
      "MAKEFILE"
      "Makefile"
      ;; runs on JVM, java,kotlin etc
      ".java"
      ".kt";;this is for kotlin
      ".mvn"
      ".gradle" ".properties";; this is for gradle-projects
      ".clj";;lisp on the JVM
      ;; lisps
      ".cl"
      ".el"
      ".scm"
      ".lisp"
      ;; configuration
      ".yaml"
      ".toml"
      ;; json is already in this list
      ;; notes,markup and orgmode
      ".md"
      ".markdown"
      ".org"
      ".txt"
      "README"
      ;; Jupyter Notebooks
      ".ipynb"))

    ;; Increase the indentation for better useability.
    (setq speedbar-indentation-width 3)
    ;; make speedbar update automaticaly, and dont use ugly icons(images)
    (setq speedbar-update-flag t)
    (setq speedbar-use-images nil)
    (setq sr-speedbar-right-side nil)

    ;; (add-to-list 'speedbar-expand-image-button-alist
    ;;              '("<+>" . my/directory-plus))
    ;; (add-to-list 'speedbar-expand-image-button-alist
    ;;              '("<->" . my/directory-minus))

    :hook
    ((speedbar-mode . (lambda()
			;; Disable word wrapping in speedbar if you always enable it globally.
			(visual-line-mode 0) 
			;; Change speedbar's text size.  May need to alter the icon size if you change size.
			(text-scale-adjust -1)))
     ;; (modus-themes-post-load . my/define-speedbar-images)
     ))
  (use-package sr-speedbar
    :bind
    (:map my/toggle-map
	  ("s" . sr-speedbar-toggle)))

  ;; (use-package pretty-speedbar
  ;;   :demand t
  ;;   :custom
  ;;   (pretty-speedbar-font "Symbols Nerd Font Mono")
  ;;   )
#+end_src

*** Programming
**** tree-sitter
This is an Emacs Lisp binding for tree-sitter, an incremental parsing library. It requires Emacs 25.1 or above, built with dynamic module support.

It aims to be the foundation for a new breed of Emacs packages that understand code structurally. For example:

- Faster, fine-grained code highlighting.
- More flexible code folding.
- Structural editing (like Paredit, or even better) for non-Lisp code.
- More informative indexing for imenu.

#+begin_src emacs-lisp
  (use-package tree-sitter
    :config
    (global-tree-sitter-mode)
    :hook
    (tree-sitter-after-on . tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :straight t
    :after tree-sitter)
#+end_src
**** eglot
#+begin_src emacs-lisp
  (use-package eglot
    :hook (python-mode . eglot-ensure))
#+end_src

**** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    ;; Let diff-hl have left fringe, flycheck can have right fringe
    (setq flycheck-indication-mode 'right-fringe)
    ;; A non-descript, left-pointing arrow
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [16 48 112 240 112 48 16] nil nil 'center)
    :hook (after-init . global-flycheck-mode))
#+END_SRC

**** Format All
#+begin_src emacs-lisp
  (use-package format-all
    ;;:hook (prog-mode . format-all-mode)
    :bind
    (:map my/toggle-map
	  ("f" . format-all-buffer)))
#+end_src

**** Python
#+begin_src emacs-lisp
  (use-package python
    :mode ("[./]flake8\\'" . conf-mode)
    :mode ("/Pipfile\\'" . conf-mode)
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode)
    :config
    ;; Let Emacs guess Python indent silently
    (setq python-indent-guess-indent-offset t
	  python-indent-guess-indent-offset-verbose nil)

    ;; Default to Python 3. Prefer the versioned Python binaries since some
    ;; systems link the unversioned one to Python 2.
    (when (and (executable-find "python3")
	       (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3")))

  (use-package pyimport
    :after python)

  (use-package py-isort
    :after python)

  (use-package numpydoc
    :after python)

  (use-package conda
    :after python
    :init
    ;; support for mambaforge envs
    (setq conda-anaconda-home "~/mambaforge/"
	  conda-env-home-directory "~/mambaforge/")
    :config
    ;; interactive shell support
    (conda-env-initialize-interactive-shells)
    ;; if you want eshell support, include:
    (conda-env-initialize-eshell)
    (conda-env-activate "dev310")
    ;; enable auto-activation
    ;; (conda-env-autoactivate-mode t)
    ;; if you want to automatically activate a conda environment on the opening of a file:
    ;; (add-to-hook 'find-file-hook (lambda () (when (bound-and-true-p conda-project-env-path)
    ;; 					     (conda-env-activate-for-buffer))))
    )
#+end_src
**** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+end_src
**** lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :mode "\\.lua\\'")
#+end_src
**** latex
#+begin_src emacs-lisp
  (use-package auctex
    :mode ("\\.tex\\'" . latex-mode)
    :commands (latex-mode LaTeX-mode plain-tex-mode)
    :hook
    ((LaTeX-mode-hook . LaTeX-preview-setup)
     (LaTeX-mode-hook . LaTeX-math-mode)
     (LaTeX-mode-hook . flyspell-mode)
     (LaTeX-mode-hook . turn-on-reftex))
    :config
    (setq TeX-auto-save t
	  TeX-parse-self t
	  TeX-save-query nil
	  TeX-PDF-mode t))
#+end_src
**** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode "\\.md\\'")
#+end_src
*** Keybindings
**** Meow
Meow is yet another modal editing mode for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package meow
    :demand t
    :custom
    (meow-keypad-start-keys . ())
    (meow-keypad-meta-prefix . nil)
    (meow-keypad-ctrl-meta-prefix . nil)
    (meow-keypad-literal-prefix . nil)
    ;; (meow-keypad-self-insert-undefined . nil)

    :config
    ;; use system clipboard
    (setq meow-use-clipboard t)
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

    ;; Buffer-local variable to specify the desired Meow state
    (defvar my/meow-desired-state nil
      "Buffer-local variable to specify the desired Meow state.")

    ;; Function to set the buffer-local value of my/meow-desired-state
    (defun my/meow-set-desired-state (state)
      "Set the buffer-local variable 'my/meow-desired-state' to the specified state."
      (setq-local my/meow-desired-state state))

    ;; Advice function to modify 'meow--mode-get-state' based on 'my/meow-desired-state'
    (defun my/meow-mode-get-state-advice (orig-func &rest args)
      "Advice function to modify 'meow--mode-get-state' based on 'my/meow-desired-state'."
      (if my/meow-desired-state
	  my/meow-desired-state
	(apply orig-func args)))

    ;; Apply advice to 'meow--mode-get-state'
    (advice-add 'meow--mode-get-state :around #'my/meow-mode-get-state-advice)

    ;; Hook to set my/meow-desired-state to 'motion' when entering git-timemachine mode
    (defun my/meow-git-timemachine-hook ()
      "Hook to set my/meow-desired-state to 'motion' when entering git-timemachine mode."
      (my/meow-set-desired-state 'motion))

    (add-to-list 'meow-keymap-alist `(leader . ,my/leader-map))
    :bind
    (:map meow-motion-state-keymap
	  ("j" . meow-next)
	  ("k" . meow-prev)
	  ("<escape>" . ignore)
	  :map my/leader-map
	  ;; ("j" . "H-j")
	  ;; ("k" . "H-k")
	  ;; ("x" ("C-x" . ctl-x-map))
	  ;;("m" . (lambda ()(meow--execute-kbd-macro "C-c")))
	  ;; Use SPC (0-9) for digit arguments.
	  ("1" . meow-digit-argument)
	  ("2" . meow-digit-argument)
	  ("3" . meow-digit-argument)
	  ("4" . meow-digit-argument)
	  ("5" . meow-digit-argument)
	  ("6" . meow-digit-argument)
	  ("7" . meow-digit-argument)
	  ("8" . meow-digit-argument)
	  ("9" . meow-digit-argument)
	  ("0" . meow-digit-argument)
	  ("/" . meow-keypad-describe-key)
	  ("?" . meow-cheatsheet)
	  :map meow-normal-state-keymap
	  ("0" . meow-expand-0)
	  ("9" . meow-expand-9)
	  ("8" . meow-expand-8)
	  ("7" . meow-expand-7)
	  ("6" . meow-expand-6)
	  ("5" . meow-expand-5)
	  ("4" . meow-expand-4)
	  ("3" . meow-expand-3)
	  ("2" . meow-expand-2)
	  ("1" . meow-expand-1)
	  ("-" . negative-argument)
	  (";" . meow-reverse)
	  ("," . meow-inner-of-thing)
	  ("." . meow-bounds-of-thing)
	  ("[" . meow-beginning-of-thing)
	  ("]" . meow-end-of-thing)
	  ("a" . meow-append)
	  ("A" . meow-open-below)
	  ("b" . meow-back-word)
	  ("B" . meow-back-symbol)
	  ("c" . meow-change)
	  ("C" . meow-comment)
	  ("d" . meow-delete)
	  ("D" . meow-backward-delete)
	  ("e" . meow-next-word)
	  ("E" . meow-next-symbol)
	  ("f" . meow-find)
	  ("<escape>" . meow-cancel-selection)
	  ("G" . meow-grab)
	  ("h" . meow-left)
	  ("H" . meow-left-expand)
	  ("i" . meow-insert)
	  ("I" . meow-open-above)
	  ("j" . meow-next)
	  ("J" . meow-next-expand)
	  ("k" . meow-prev)
	  ("K" . meow-prev-expand)
	  ("l" . meow-right)
	  ("L" . meow-right-expand)
	  ("m" . meow-join)
	  ("n" . meow-search)
	  ("o" . meow-block)
	  ("O" . meow-to-block)
	  ("p" . meow-yank)
	  ("q" . meow-quit)
	  ("Q" . meow-goto-line)
	  ("r" . meow-replace)
	  ("R" . undo-redo)
	  ("s" . meow-kill)
	  ("t" . meow-till)
	  ("u" . meow-undo)
	  ("U" . meow-undo-in-selection)
	  ("v" . meow-visit)
	  ("w" . meow-mark-word)
	  ("W" . meow-mark-symbol)
	  ("x" . meow-line)
	  ("X" . meow-goto-line)
	  ("y" . meow-save)
	  ("Y" . meow-sync-grab)
	  ("z" . meow-pop-selection)
	  ("=" . meow-indent)
	  ("'" . repeat))
    :hook
    ((git-timemachine-mode . my/meow-git-timemachine-hook)
     (after-init . meow-global-mode)))
#+END_SRC

**** Which Key
The mode displays the key bindings following your currently entered incomplete command (a ;; prefix) in a popup.
#+begin_src emacs-lisp
  (use-package which-key
    :after meow emacs
    :defer 0.1
    :config
    (setq which-key-idle-delay 0.1)
    (which-key-mode))
#+end_src

** Conventional Library Footer
#+begin_src emacs-lisp
  (provide 'emacs.el)
  ;;; emacs.el ends here
#+end_src
