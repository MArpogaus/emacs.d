#+TITLE: Emacs Literate Configuration
#+AUTHOR: Marcel Arpogaus
#+PROPERTY: header-args :tangle yes
#+auto_tangle: t

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
  - [[#references][References]]
  - [[#org-file-tweaks][Org File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#settings][Settings]]
    - [[#package-management][Package Management]]
    - [[#emacs-configuration][Emacs Configuration]]
  - [[#packages][Packages]]
    - [[#ui][UI]]
    - [[#org][Org]]
    - [[#tools][Tools]]
    - [[#editor][Editor]]
    - [[#completion][Completion]]
    - [[#version-control][Version Control]]
    - [[#project-management][Project Management]]
    - [[#programming][Programming]]
  - [[#post-initialization][Post Initialization]]

** About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

** References
The folliwing Setteinge were inspired by:
- [[https://github.com/rougier/dotemacs][GitHub - rougier/dotemacs: Litterate configuration for GNU Emacs]]
- [[https://systemcrafters.net/emacs-from-scratch/the-best-default-settings/][The 6 Emacs Settings Every User Should Consider - System Crafters]]
- [[https://config.daviwil.com/emacs][Emacs Configuration - config.daviwil.com]]
- [[https://github.com/doomemacs/doomemacs][GitHub - doomemacs/doomemacs: An Emacs framework for the stubborn martian hacker]]
  
** Org File Tweaks
There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Visibility Settings
Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show it's direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_3_gh:=. This
tells an org-mode package =toc-org= to generate a table of contents under this heading
that has a max depth of 3 and is created using Github-style hrefs. This table of contents
is updated everytime the file is saved and makes for a functional table of contents that
works property directly on github.

** Emacs Initialization
*** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time and add a hook to measure Emacs startup time. 
We'll lower this value significantly after initialization has completed.
We don't want to keep this value too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq gc-cons-threshold (* 50 1000 1000)
          gc-cons-percentage 0.6))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

*** Package Management

**** straight.el bootstrap code
#+begin_src emacs-lisp
  ;; Optimze startup time
  ;; https://github.com/radian-software/straight.el#my-use-package-form-isnt-working-properly
  (if (and (executable-find "watchexec") (executable-find "python3"))
      (setq straight-check-for-modifications '(watch-files find-when-checking))
    (setq straight-check-for-modifications '(check-on-save find-when-checking)))
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Load the helper package for commands like `straight-x-clean-unused-repos'
  (require 'straight-x)
#+end_src

**** install and configure use-packege
#+BEGIN_SRC emacs-lisp
  (setq straight-use-package-by-default t
        use-package-always-defer nil)
  (straight-use-package 'use-package)
#+END_SRC

**** Global Variales
***** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Marcel Arpogaus"
        user-mail-address "marcel.arpogaus@gmail.com")
#+END_SRC
***** Paths
#+BEGIN_SRC emacs-lisp
  (setq org-directory (concat (getenv "HOME") "/Notes/org/"))
  (setq org-brain-path (concat org-directory "brain/"))
  (setq projectile-project-search-path '("~/Projekte"))
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)
#+end_src

*** Emacs Configuration
#+begin_src emacs-lisp
  (use-package emacs
    :config
    ;; Startup
    ;; Emacs does a lot of things at startup and here, we disable pretty much everything.
    (setq-default
     inhibit-startup-screen t               ; Disable start-up screen
     inhibit-startup-message t              ; Disable startup message
     inhibit-startup-echo-area-message t    ; Disable initial echo message
     initial-scratch-message ""             ; Empty the initial *scratch* buffer
     initial-buffer-choice t                ; Open *scratch* buffer at init
     display-line-numbers-type t)

    ;; Encoding
    ;; We tell emacs to use UTF-8 encoding as much as possible.
    (set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
    (prefer-coding-system       'utf-8)     ; Add utf-8 at the front for automatic detection.
    (set-terminal-coding-system 'utf-8)     ; Set coding system of terminal output
    (set-keyboard-coding-system 'utf-8)     ; Set coding system for keyboard input on TERMINAL
    (set-language-environment "English")    ; Set up multilingual environment

    ;; Recovery
    ;; If Emacs or the computer crashes, you can recover the files you were editing at the time of the crash from their auto-save files. To do this, start Emacs again and type the command ~M-x recover-session~. Here, we parameterize how files are saved in the background.
    (setq auto-save-list-file-prefix ; Prefix for generating auto-save-list-file-name
          (expand-file-name ".auto-save-list/.saves-" user-emacs-directory)
          auto-save-default t        ; Auto-save every buffer that visits a file
          auto-save-timeout 20       ; Number of seconds between auto-save
          auto-save-interval 200)    ; Number of keystrokes between auto-saves

    ;; History
    ;; Remove text properties for kill ring entries (see https://emacs.stackexchange.com/questions/4187). This saves a lot of time when loading it.
    (defun unpropertize-kill-ring ()
      (setq kill-ring (mapcar 'substring-no-properties kill-ring)))
    (add-hook 'kill-emacs-hook 'unpropertize-kill-ring)

    ;; Customization File
    ;; Since init.el will be generated from this file, we save customization in a dedicated file.
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file 'noerror 'nomessage)

    ;; Cursor
    ;; We set the appearance of the cursor: horizontal line, 2 pixels thick, no blinking
    (setq-default cursor-in-non-selected-windows nil ; Hide the cursor in inactive windows
                  cursor-type '(hbar . 2)            ; Underline-shaped cursor
                  cursor-intangible-mode t           ; Enforce cursor intangibility
                  x-stretch-cursor nil)              ; Don't stretch cursor to the glyph width
    (blink-cursor-mode 0)                            ; Still cursor

    ;; Record cursor position from one session ot the other
    (save-place-mode 1)

    ;; Text
    ;; Pretty self-explanatory
    (setq-default use-short-answers t                     ; Replace yes/no prompts with y/n
                  confirm-nonexistent-file-or-buffer nil) ; Ok to visit non existent files

    ;; Mouse
    ;; Mouse behavior can be finely controlled using the [[help:mouse-avoidance-mode][mouse-avoidance-mode]].
    (setq-default mouse-yank-at-point t) ; Yank at point rather than pointer
    (mouse-avoidance-mode 'exile)        ; Avoid collision of mouse with point

    ;; Mouse active in tty mode.
    (unless (display-graphic-p)
      (xterm-mouse-mode 1)
      ;; Scroll
      ;; Smoother scrolling.
      (setq-default scroll-conservatively 101       ; Avoid recentering when scrolling far
                    scroll-margin 2                 ; Add a margin when scrolling vertically
                    recenter-positions '(5 bottom))) ; Set re-centering positions
    ;; Typography
    (setq-default fill-column 80                          ; Default line width 
                  sentence-end-double-space nil           ; Use a single space after dots
                  bidi-paragraph-direction 'left-to-right ; Faster
                  truncate-string-ellipsis "…")           ; Nicer ellipsis

    ;; Default mode
    ;; Default & initial mode is text.
    (setq-default initial-major-mode 'text-mode   ; Initial mode is text
                  default-major-mode 'text-mode)  ; Default mode is text
    ;; Visual line mode for prog and text modes
    (add-hook 'text-mode-hook 'visual-line-mode)
    (add-hook 'prog-mode-hook 'visual-line-mode)

    ;; Tabulations
    ;; No tabulation, ever.
    (setq-default indent-tabs-mode nil        ; Stop using tabs to indent
                  tab-always-indent 'complete ; Indent first then try completions
                  tab-width 4)                ; Smaller width for tab characters

    ;; time-stamp in header
    ;; Update time stamp in Headr when file is saved
    (setq
     time-stamp-active t          ; do enable time-stamps
     time-stamp-format "%04Y-%02m-%02d %02H:%02M:%02S (%U)") ; date format
    (add-hook 'write-file-functions 'time-stamp) ; update when saving

    ;;ESC Cancels All
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    ;; Line numbers
    ;; Enable line numbers and customize their format.
    (column-number-mode)

    ;; Enable line numbers for some modes
    (dolist (mode '(text-mode-hook
                    prog-mode-hook
                    conf-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 1))))

    ;; Override some modes which derive from the above
    (dolist (mode '(org-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

    ;; Don't pop up UI dialogs when prompting
    (setq use-dialog-box nil)

    ;; Revert buffers when the underlying file has changed
    (global-auto-revert-mode 1)
    ;; Revert Dired and other buffers
    (setq global-auto-revert-non-file-buffers t)

    ;; auto-insert matching bracket
    (electric-pair-mode 1)

    ;; auto-insert matching quotes
    (electric-quote-mode 1)

    ;; Change re-builder syntax
    ;; https://www.masteringemacs.org/article/re-builder-interactive-regexp-builder
    (setq reb-re-syntax 'string))
#+end_src

** Packages
*** UI
**** Modus Themes
Accessible themes for GNU Emacs, conforming with the highest standard for colour contrast between background and foreground values (WCAG AAA)
https://protesilaos.com/emacs/modus-themes

#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
    :config
    ;; Minimal UI
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)

    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil)

    ;; Load the theme of your choice.
    (load-theme 'modus-operandi :no-confirm)

    ;; (define-key global-map (kbd "<f5>") #'modus-themes-toggle

    ;; Choose some fonts
    ;; (set-face-attribute 'default nil :family "Iosevka")
    ;; (set-face-attribute 'variable-pitch nil :family "Iosevka Aile")
    ;; (set-face-attribute 'org-modern-symbol nil :family "Iosevka")

    ;; Add frame borders and window dividers
    (modify-all-frames-parameters
     '((right-divider-width . 20)
       (internal-border-width . 20)))
    (dolist (face '(window-divider
                    window-divider-first-pixel
                    window-divider-last-pixel))
      (face-spec-reset-face face)
      (set-face-foreground face (face-attribute 'default :background)))
    (set-face-background 'fringe (face-attribute 'default :background)))
#+END_SRC
**** doom-modline
A fancy and fast mode-line inspired by minimalism design.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    ;; If non-nil, cause imenu to see `doom-modeline' declarations.
    ;; This is done by adjusting `lisp-imenu-generic-expression' to
    ;; include support for finding `doom-modeline-def-*' forms.
    ;; Must be set before loading doom-modeline.
    (setq doom-modeline-support-imenu t)

    :config
    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (setq doom-modeline-height 20)

    ;; display the real names, please put this into your init file.
    (setq find-file-visit-truename t)

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (setq doom-modeline-hud t)

    ;; Whether display icons in the mode-line.
    ;; While using the server mode in GUI, should set the value explicitly.
    (setq doom-modeline-icon t)

    ;; If non-nil, only display one number for checker information if applicable.
    (setq doom-modeline-checker-simple-format t)

    (doom-modeline-mode 1))
#+END_SRC

**** nerd-icons
A Library for Nerd Font icons. Required for modline icons.
#+BEGIN_SRC emacs-lisp
  (use-package nerd-icons)
#+END_SRC
**** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
#+end_src

**** ascii-art-to-unicode
Make org-brain-visualize-mode look a bit nicer.
#+begin_src emacs-lisp
  (use-package ascii-art-to-unicode
    :config
    (defface aa2u-face '((t . nil))
      "Face for aa2u box drawing characters")
    (advice-add #'aa2u-1c :filter-return
                (lambda (str) (propertize str 'face 'aa2u-face)))
    (defun aa2u-org-brain-buffer ()
      (let ((inhibit-read-only t))
        (make-local-variable 'face-remapping-alist)
        (add-to-list 'face-remapping-alist
                     '(aa2u-face . org-brain-wires))
        (ignore-errors (aa2u (point-min) (point-max)))))
    (with-eval-after-load 'org-brain
      (add-hook 'org-brain-after-visualize-hook #'aa2u-org-brain-buffer)))
#+end_src

**** Ligatures

#+BEGIN_SRC emacs-lisp
  (use-package ligature
    :config
    ;; set Fira as default font
    (set-frame-font "Fira Code Light-10" nil t)
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures '(eww-mode org-mode) '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures '(prog-mode org-mode)
                            '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                              ;; =:= =!=
                              ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                              ;; ;; ;;;
                              (";" (rx (+ ";")))
                              ;; && &&&
                              ("&" (rx (+ "&")))
                              ;; !! !!! !. !: !!. != !== !~
                              ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                              ;; ?? ??? ?:  ?=  ?.
                              ("?" (rx (or ":" "=" "\." (+ "?"))))
                              ;; %% %%%
                              ("%" (rx (+ "%")))
                              ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                              ;; |->>-||-<<-| |- |== ||=||
                              ;; |==>>==<<==<=>==//==/=!==:===>
                              ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                              "-" "=" ))))
                              ;; \\ \\\ \/
                              ("\\" (rx (or "/" (+ "\\"))))
                              ;; ++ +++ ++++ +>
                              ("+" (rx (or ">" (+ "+"))))
                              ;; :: ::: :::: :> :< := :// ::=
                              (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                              ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                              ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                              "="))))
                              ;; .. ... .... .= .- .? ..= ..<
                              ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                              ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                              ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                              ;; *> */ *)  ** *** ****
                              ("*" (rx (or ">" "/" ")" (+ "*"))))
                              ;; www wwww
                              ("w" (rx (+ "w")))
                              ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                              ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                              ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                              ;; << <<< <<<<
                              ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                              "-"  "/" "|" "="))))
                              ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                              ;; >> >>> >>>>
                              (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                              ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                              ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                           (+ "#"))))
                              ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                              ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                              ;; __ ___ ____ _|_ __|____|_
                              ("_" (rx (+ (or "_" "|"))))
                              ;; Fira code: 0xFF 0x12
                              ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                              ;; Fira code:
                              "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                              ;; The few not covered by the regexps.
                              "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+END_SRC

*** Org
**** Org
Let's include a newer version of org-mode than the one that is built in. We're going
to manually remove the org directories from the load path, to ensure the version we
want is prioritized instead.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :config
    (setq org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          ;; Return or left-click with mouse follows link
          org-return-follows-link t
          org-mouse-1-follows-link t
          ;; Display links as the description provided
          org-link-descriptive t)


    (setq org-agenda-files
          (mapcar 'file-truename
                  (file-expand-wildcards (concat org-directory "agenda/*.org"))))

    ;; Refile
    (setq org-refile-targets `((,(concat org-directory "agenda/agenda.org") :maxlevel . 3)
                               (,(concat org-directory "agenda/projects.org") :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")
                               (,(concat org-directory "agenda/someday.org") :level . 1)
                               (,(concat org-directory "agenda/literature.org") :maxlevel . 2)
                               (,(concat org-directory "agenda/scheduled.org") :maxlevel . 2)))

    ;; Save the corresponding buffers
    (defun gtd-save-org-buffers ()
      "Save `org-agenda-files' buffers without user confirmation. See also `org-save-all-org-buffers'"
      (interactive)
      (message "Saving org-agenda-files buffers...")
      (save-some-buffers t (lambda ()
                             (when (member (buffer-file-name) org-agenda-files)
                               t)))
      (message "Saving org-agenda-files buffers... done"))

    ;; Add it after refile
    (advice-add 'org-refile :after
                (lambda (&rest _)
                  (gtd-save-org-buffers)))

    ;; Wie gehts das??
    ;; (defun gtd-sort-tasks (&rest ignore)
    ;;   (org-sort-list nil ?x))
    ;; (add-hook 'org-after-todo-state-change-hook #'gtd-sort-tasks)

    ;; Todo
    (setq org-todo-keywords
          '((sequence
             "TODO(t)"  ; A task that needs doing & is ready to do
             "PROJ(p)"  ; A project, which usually contains other tasks
             "NEXT(n)"  ; Next task in a project
             "STRT(s)"  ; A task that is in progress
             "WAIT(w)"  ; Something external is holding up this task
             "HOLD(h)"  ; This task is paused/on hold because of me
             "|"
             "DONE(d)"  ; Task successfully completed
             "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
            (sequence
             "[ ](T)"   ; A task that needs doing
             "[-](S)"   ; Task is in progress
             "[?](W)"   ; Task is being held up or paused
             "|"
             "[X](D)")) ; Task was completed
          org-todo-keyword-faces
          '(("[-]"  . +org-todo-active)
            ("STRT" . +org-todo-active)
            ("[?]"  . +org-todo-onhold)
            ("WAIT" . +org-todo-onhold)
            ("HOLD" . +org-todo-onhold)
            ("PROJ" . +org-todo-project)))
    (defun log-todo-next-creation-date (&rest ignore)
      "Log NEXT creation time in the property drawer under the key 'ACTIVATED'"
      (when (and (string= (org-get-todo-state) "NEXT")
                 (not (org-entry-get nil "ACTIVATED")))
        (org-entry-put nil "ACTIVATED" (format-time-string "[%Y-%m-%d]"))))
    (add-hook 'org-after-todo-state-change-hook #'log-todo-next-creation-date)

    ;; Add timstamp to items when doen
    (setq org-log-done 'time)

    ;; Agenda
    (setq org-agenda-custom-commands
          '(("g" "Get Things Done (GTD)"
             ((agenda ""
                      ((org-agenda-span 'day)
                       (org-agenda-start-day "today")
                       (org-agenda-skip-function
                        '(or (org-agenda-skip-entry-if 'deadline)
                             (my/org-agenda-skip-without-match "-groceries")
                             (my/org-agenda-skip-without-match "-social")))
                       (org-deadline-warning-days 0)))
              (todo "STRT"
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
                     (org-agenda-prefix-format "  %i %-12:c [%e] ")
                     (org-agenda-overriding-header "\nActive Tasks\n")))
              (todo "NEXT"
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
                     (org-agenda-prefix-format "  %i %-12:c [%e] ")
                     (org-agenda-overriding-header "\nNext Tasks\n")))
              (agenda nil
                      ((org-agenda-entry-types '(:deadline))
                       (org-agenda-format-date "")
                       (org-deadline-warning-days 7)
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                       (org-agenda-overriding-header "\nDeadlines")))
              (tags-todo "inbox"
                         ((org-agenda-prefix-format "  %?-12t% s")
                          (org-agenda-overriding-header "\nInbox\n")))
              (todo "HOLD|WAIT"
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-agenda-sorting-strategy '(priority-down category-keep effort-up))
                     (org-agenda-prefix-format "  %i %-12:c [%e] ")
                     (org-agenda-overriding-header "\nPaused Tasks\n")))
              (tags "CLOSED>=\"<today>\""
                    ((org-agenda-overriding-header "\nCompleted today\n")))))
            ("G" "Shopping List" tags-todo "groceries"
             ((org-agenda-tags-todo-honor-ignore-options t)
              (org-agenda-skip-deadline-prewarning-if-scheduled t)
              (org-agenda-todo-ignore-scheduled 'future)
              (org-agenda-sorting-strategy '(scheduled-up))
              (org-agenda-prefix-format "%s")))
            ("l" "Literature" tags-todo "literature"
             ((org-agenda-sorting-strategy '(priority-down category-keep effort-up))
              (org-agenda-prefix-format "  %i %-12:c [%e] ")))
            ("p" "Social"
             ((agenda ""
                      ((org-agenda-span 'week)
                       (org-agenda-start-day "today")
                       (org-agenda-skip-function
                        '(or (org-agenda-skip-entry-if 'deadline)
                             (my/org-agenda-skip-without-match "-groceries")))
                       (org-deadline-warning-days 0)))
              (tags-todo "social"
                         ((org-agenda-tags-todo-honor-ignore-options t)
                          (org-agenda-skip-deadline-prewarning-if-scheduled t)
                          (org-agenda-todo-ignore-scheduled 'future)
                          (org-agenda-sorting-strategy '(scheduled-up))
                          (org-agenda-prefix-format "%s"))))))
          )
    ;; archive all DONE tasks in subtree
    ;; https://stackoverflow.com/questions/6997387
    (defun org-archive-done-tasks ()
      (interactive)
      (org-map-entries
       (lambda ()
         (org-archive-subtree)
         (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
       "/DONE" 'tree))
    ;; Org LaTeX language support
    ;; https://orgmode.org/manual/LaTeX-specific-export-settings.html
    (add-to-list 'org-latex-packages-alist
                 '("AUTO" "babel" t ("pdflatex")))
    (add-to-list 'org-latex-packages-alist
                 '("AUTO" "polyglossia" t ("xelatex" "lualatex")))

    (with-eval-after-load 'ox-latex
      ;; Support for KOMA script article class
      ;; https://orgmode.org/worg/org-tutorials/org-latex-export.html#org3ed51b6
      (add-to-list 'org-latex-classes
                   '("koma-article"
                     "\\documentclass{scrartcl}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      (add-to-list 'org-latex-classes
                   '("koma-letter"
                     "\\documentclass{scrlttr2}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

    (with-eval-after-load 'ox-beamer
      (add-to-list 'org-beamer-environments-extra
                   '("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}")))

    (with-eval-after-load 'ox-extra
      (ox-extras-activate '(ignore-headlines))))
#+END_SRC
**** org-auto-tangle
#+BEGIN_SRC emacs-lisp
  (use-package org-auto-tangle
    :after org
    :hook (org-mode . org-auto-tangle-mode))
#+END_SRC


**** evil-org-mode
#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :requires evil 
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

**** org-brain
#+begin_src emacs-lisp
  (use-package org-brain
    :after (org org-noter)
    :init
    ;; For Evil users
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (add-hook 'before-save-hook #'org-brain-ensure-ids-in-buffer)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 24)
    (setq org-brain-include-file-entries t
          org-brain-file-entries-use-title t)

    ;; from org brain README
    ;; Here’s a command which uses org-cliplink to add a link from the clipboard
    ;; as an org-brain resource.
    ;; It guesses the description from the URL title.
    ;; Here I’ve bound it to L in org-brain-visualize.
    (defun org-brain-cliplink-resource ()
      "Add a URL from the clipboard as an org-brain resource.
  Suggest the URL title as a description for resource."
      (interactive)
      (let ((url (org-cliplink-clipboard-content)))
        (org-brain-add-resource
         url
         (org-cliplink-retrieve-title-synchronously url)
         t)))

    ;; Org-noter’s purpose is to let you create notes that are kept in sync when
    ;; you scroll through the [PDF etc] document
    (add-hook 'org-noter-insert-heading-hook #'org-id-get-create)
    (defun org-brain-open-org-noter (entry)
      "Open `org-noter' on the ENTRY.
  If run interactively, get ENTRY from context."
      (interactive (list (org-brain-entry-at-pt)))
      (org-with-point-at (org-brain-entry-marker entry)
        (org-noter)))

    (defun org-brain-insert-resource-icon (link)
      "Insert an icon, based on content of org-mode LINK."
      (insert (format "%s "
                      (cond ((string-prefix-p "brain:" link)
                             (all-the-icons-fileicon "brain"))
                            ((string-prefix-p "info:" link)
                             (all-the-icons-octicon "info"))
                            ((string-prefix-p "help:" link)
                             (all-the-icons-material "help"))
                            ((string-prefix-p "http" link)
                             (all-the-icons-icon-for-url link))
                            (t
                             (all-the-icons-icon-for-file link))))))
    (add-hook 'org-brain-after-resource-button-functions #'org-brain-insert-resource-icon)
    ;; Allows you to edit entries directly from org-brain-visualize
    ;; (add-hook 'org-brain-visualize-mode-hook #'org-brain-polymode)
    ;;:bind (:map org-brain-visualize-mode-map
    ;;      "L" . org-brain-cliplink-resource
    ;;      "C-c n" . org-brain-open-org-noter)
    )
#+end_src

**** org-noter

#+begin_src emacs-lisp
  (use-package org-noter
    :after (org pdf-tools)
    :config
    (setq
     ;; The WM can handle splits
     org-noter-notes-window-location 'other-frame
     ;; Please stop opening frames
     org-noter-always-create-frame nil
     ;; I want to see the whole file
     org-noter-hide-other nil
     ;; Everything is relative to the main notes file
     ;; org-noter-notes-search-path (list bibtex-completion-notes-path)
     ))
#+end_src

**** toc-org
Let's install and load the =toc-org= package after org mode is loaded. This is the
package that automatically generates an up to date table of contents for us.

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :after org
    :init (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC

**** org-cliplink
A simple command that takes a URL from the clipboard and inserts an org-mode link with a title of a page found by the URL into the current buffer.

#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :after org)
#+END_SRC

**** org-modern 
This package implements a modern style for your Org buffers using font locking and text properties. The package styles headlines, keywords, tables and source blocks.

#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :hook (org-mode . global-org-modern-mode)
    :after org
    :config
    ;; (setq org-modern-label-border 0.3)

    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-fold-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "…"

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?─
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────"))
#+END_src
*** Tools
**** Recent files

50 Recents files with some exclusion (regex patterns).

#+begin_src emacs-lisp
  (use-package recentf
    :config
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-var-directory))
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-etc-directory))
    (setq recentf-max-menu-items 10
          recentf-max-saved-items 100)

    (let (message-log-max)
      (recentf-mode 1)))
#+end_src
**** Server

Server start.

#+begin_src emacs-lisp
  (use-package server
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src

**** Which Key

The mode displays the key bindings following your currently entered incomplete command (a ;; prefix) in a popup.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (setq which-key-idle-delay 0.2)
    (which-key-mode))
#+end_src

**** Helpful
[[https://github.com/Wilfred/helpful][Helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.
It is a bit slow to load so we do need load it explicitely.

#+begin_src emacs-lisp
  (use-package helpful
    :config
                                          ; Focus new help windows when opened
    (setq help-window-select t))
#+end_src
**** Undo Tree

#+begin_src emacs-lisp
  (use-package undo-tree
    ;; Branching & persistent undo
    :custom (undo-tree-history-directory-alist `(("." . ,(concat user-emacs-directory "undo-tree-hist/"))))
    :config
    (setq undo-tree-visualizer-diff t
          undo-tree-auto-save-history t
          undo-tree-enable-undo-in-region t
          ;; Increase undo limits to avoid emacs prematurely truncating the undo
          ;; history and corrupting the tree. This is larger than the undo-fu
          ;; defaults because undo-tree trees consume exponentially more space,
          ;; and then some when `undo-tree-enable-undo-in-region' is involved. See
          ;; syl20bnr/spacemacs#12110
          undo-limit 800000           ; 800kb (default is 160kb)
          undo-strong-limit 12000000  ; 12mb  (default is 240kb)
          undo-outer-limit 128000000) ; 128mb (default is 24mb)

    ;; Compress undo-tree history files with zstd, if available. File size isn't
    ;; the (only) concern here: the file IO barrier is slow for Emacs to cross;
    ;; reading a tiny file and piping it in-memory through zstd is *slightly*
    ;; faster than Emacs reading the entire undo-tree file from the get go (on
    ;; SSDs). Whether or not that's true in practice, we still enjoy zstd's ~80%
    ;; file savings (these files add up over time and zstd is so incredibly fast).
    (when (executable-find "zstd")
      (defun my/add_zst_ext (file)
        (concat file ".zst"))
      (advice-add 'my/add_zst_ext
                  :filter-return #'undo-tree-make-history-save-file-name))

    (global-undo-tree-mode))
#+end_src

**** Savehist
#+begin_src emacs-lisp
  (use-package savehist
    :config
    (setq kill-ring-max 50
          history-length 50)

    (setq savehist-additional-variables
          '(kill-ring
            command-history
            set-variable-value-history
            custom-variable-history   
            query-replace-history     
            read-expression-history   
            minibuffer-history        
            read-char-history         
            face-name-history         
            bookmark-history
            file-name-history))

    (put 'minibuffer-history         'history-length 50)
    (put 'file-name-history          'history-length 50)
    (put 'set-variable-value-history 'history-length 25)
    (put 'custom-variable-history    'history-length 25)
    (put 'query-replace-history      'history-length 25)
    (put 'read-expression-history    'history-length 25)
    (put 'read-char-history          'history-length 25)
    (put 'face-name-history          'history-length 25)
    (put 'bookmark-history           'history-length 25)

    ;; No duplicates in history  
    (setq history-delete-duplicates t)

    ;;Start history mode.
    (let (message-log-max)
      (savehist-mode)))
#+end_src

**** PDF Tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (add-hook 'doc-view-mode-hook 'pdf-tools-install)

    (setq-default pdf-view-use-scaling t
                  pdf-view-use-imagemagick nil))
#+end_src

**** Exec Path From Shell
#+begin_src emacs-lisp :tangle no
  (use-package exec-path-from-shell
    :config
    (exec-path-from-shell-copy-env "SSH_AGENT_PID")
    (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

*** Editor
**** Highlighting current line

Highlighting of the current line (native mode)

#+begin_src emacs-lisp
  (use-package hl-line
    :config
    (global-hl-line-mode))
#+end_src

**** Parenthesis

Paren mode for highlighting matcing paranthesis

#+begin_src emacs-lisp
  (use-package paren
    :config
    ;; (setq show-paren-style 'expression)
    (setq show-paren-style 'parenthesis)
    (setq show-paren-when-point-in-periphery t)
    (setq show-paren-when-point-inside-paren nil)
    (show-paren-mode))
#+end_src

**** Evil
Install, automatically load, and enable evil. It's like vim, but better!

heavily inspired by: [[https://github.com/doomemacs/doomemacs/blob/master/modules/editor/evil/config.el][doomemacs/config.el at master]] 

#+begin_src emacs-lisp :tangle no
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :preface
    (setq evil-ex-search-vim-style-regexp t
          evil-ex-visual-char-range t  ; column range for ex commands
          evil-mode-line-format 'nil
          ;; more vim-like behavior
          evil-symbol-word-search t
          ;; if the current state is obvious from the cursor's color/shape, then
          ;; we won't need superfluous indicators to do it instead.
          evil-default-cursor '+evil-default-cursor-fn
          evil-normal-state-cursor 'box
          evil-emacs-state-cursor  '(box +evil-emacs-cursor-fn)
          evil-insert-state-cursor 'bar
          evil-visual-state-cursor 'hollow
          ;; Only do highlighting in selected window so that Emacs has less work
          ;; to do highlighting them all.
          evil-ex-interactive-search-highlight 'selected-window
          ;; It's infuriating that innocuous "beginning of line" or "end of line"
          ;; errors will abort macros, so suppress them:
          evil-kbd-macro-suppress-motion-error t
          evil-undo-system 'undo-tree)
    :config
    (evil-select-search-module 'evil-search-module 'evil-search)

    ;; PERF: Stop copying the selection to the clipboard each time the cursor
    ;; moves in visual mode. Why? Because on most non-X systems (and in terminals
    ;; with clipboard plugins like xclip.el active), Emacs will spin up a new
    ;; process to communicate with the clipboard for each movement. On Windows,
    ;; older versions of macOS (pre-vfork), and Waylang (without pgtk), this is
    ;; super expensive and can lead to freezing and/or zombie processes.
    ;;
    ;; UX: It also clobbers clipboard managers (see emacs-evil/evil#336).
    (setq evil-visual-update-x-selection-p nil)
    (evil-mode 1))

  ;; This is a collection of Evil bindings for the parts of Emacs that Evil does not cover properly by default, such as help-mode, M-x calendar, Eshell and more.
  (use-package evil-collection
    :after evil
    :requires evil
    :config
    (evil-collection-init))
#+end_src

**** Meow
Meow is yet another modal editing mode for Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package meow
    :init
    (defun meow-setup ()
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet))
      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)
       '("-" . negative-argument)
       '(";" . meow-reverse)
       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       '("C" . comment-or-uncomment-region)
       '("d" . meow-delete)
       '("D" . meow-backward-delete)
       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       '("<escape>" . meow-cancel-selection)
       '("G" . meow-grab)
       '("h" . meow-left)
       '("H" . meow-left-expand)
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("j" . meow-next)
       '("J" . meow-next-expand)
       '("k" . meow-prev)
       '("K" . meow-prev-expand)
       '("l" . meow-right)
       '("L" . meow-right-expand)
       '("m" . meow-join)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       '("p" . meow-yank)
       '("q" . meow-quit)
       '("Q" . meow-goto-line)
       '("r" . meow-replace)
       '("R" . meow-swap-grab)
       '("s" . meow-kill)
       '("t" . meow-till)
       '("u" . meow-undo)
       '("U" . meow-undo-in-selection)
       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("Y" . meow-sync-grab)
       '("z" . meow-pop-selection)
       '("=" . meow-indent)
       '("'" . repeat)))
    :config
    (meow-setup)
    (meow-global-mode 1))
#+END_SRC

*** Completion
**** Vertico
Vertico provides a performant and minimalistic vertical completion UI based on the default completion system. 

#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :config
    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)

    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    (setq read-extended-command-predicate
          #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)

    ;; enable vertico
    (vertico-mode))
#+end_src

**** Marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+END_SRC

**** Corfu
Corfu is the minimalistic in-buffer completion counterpart of the Vertico minibuffer UI.
#+BEGIN_SRC emacs-lisp
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since Dabbrev can be used globally (M-/).
    ;; See also `corfu-exclude-modes'.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))

  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))
#+END_SRC
**** Consult
additional featureful completion commands
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    ;; :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Configure a different project root function.
    (autoload 'projectile-project-root "projectile")
    (setq consult-project-function (lambda (_) (projectile-project-root))))
#+end_src
**** Embark
Embark makes it easy to choose a command to run based on what is near point, both during a minibuffer completion session (in a way familiar to Helm or Counsel users) and in normal buffers.
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("M-." . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
**** Citar
Citar provides a highly-configurable completing-read front-end to browse and act on BibTeX, BibLaTeX, and CSL JSON bibliographic data, and LaTeX, markdown, and org-cite editing support.

#+begin_src emacs-lisp
  (use-package citar
    :after all-the-icons
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup)
    :config
    (defvar citar-indicator-notes-icons
      (citar-indicator-create
       :symbol (all-the-icons-material
                "speaker_notes"
                :face 'all-the-icons-blue
                :v-adjust -0.3)
       :function #'citar-has-notes
       :padding "  "
       :tag "has:notes"))
    (setq citar-bibliography org-cite-global-bibliography
          citar-at-point-function 'embark-act
          citar-indicators
          (list citar-indicator-files ; plain text
                citar-indicator-notes-icons) ; icon
          citar-notes-paths (list (concat org-directory "brain/bib_notes/"))
          ctar-notes-template-multiple-files '(concat "#+TITLE: ${title}\n"
                                                      "#+AUTHOR: ${author editor}\n"
                                                      "#+DATE: ${date}\n"
                                                      "#+SOURCE: ${doi url}\n"
                                                      "#+CUSTOM_ID: ${=key= id}\n"
                                                      "#+cite_export: biblatex ieee\n"
                                                      (concat "#+bibliography: " citar-bibliography "\n\n")
                                                      "* Notes :ignore:\n"
                                                      ":PROPERTIES:\n"
                                                      ":NOTER_DOCUMENT: ${file} \n"
                                                      ":END:\n\n"
                                                      "* Summary :childless:showchildren:export:\n"
                                                      "This is a summary of [citet:@${=key=}].\n"
                                                      "** Bibliography :ignore:\n"
                                                      )
          citar-notes-template-one-file (concat "** TODO ${=key=}: ${title}, (${year}) :${type}:\n"
                                                ":PROPERTIES:\n"
                                                ":Custom_ID: ${=key=}\n"
                                                ":FILE: [[file:${file}]]\n"
                                                ":END:\n"
                                                "See [[cite:&${=key=}]]\n")
          citar-templates `((main . "${author editor:30}     ${date year issued:4}     ${title:48}")
                            (suffix . "          ${=key= id:15}    ${=type=:12}    ${tags keywords:*}")
                            (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
                            (note . ,(eval ctar-notes-template-multiple-files)))
          citar-symbols `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
                          (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
                          (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " "))
          citar-symbol-separator "  ")

    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    ;;:bind
    ;;(:map org-mode-map :package org ("C-c b" . #'org-cite-insert))
    )
  (use-package citar-embark
    :after citar embark
    :no-require
    :config (citar-embark-mode))
#+end_src

*** Version Control

**** Magit
The magical git client. Let's load magit only when one of the several entry pont
functions we invoke regularly outside of magit is called.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status magit-blame magit-log-buffer-file magit-log-all))
#+END_SRC

**** GitGutter

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :config
    ;;updates diff information in real-time
    (setq git-gutter:update-interval 0.5)

    ;; If you enable global minor mode
    (global-git-gutter-mode t)

    :bind
    (("C-x C-g" . git-gutter)
     ("C-x v =" . git-gutter:popup-hunk)

     ;; Jump to next/previous hunk
     ("C-x p" . git-gutter:previous-hunk)
     ("C-x n" . git-gutter:next-hunk)

     ;; Stage current hunk
     ("C-x v s" . git-gutter:stage-hunk)

     ;; Revert current hunk
     ("C-x v r" . git-gutter:revert-hunk)

     ;; Mark current hunk
     ("C-x v SPC" . git-gutter:mark-hunk)))
  (use-package git-gutter-fringe
    :config
    ;; (setq git-gutter-fr:side 'right-fringe)
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+END_SRC

*** Project Management
**** Perspective
Workspaces

#+BEGIN_SRC emacs-lisp
  (use-package perspective
    ;; :bind (("C-M-k" . persp-switch)
    ;;        ("C-c w w" . persp-list-buffers) ; or use a nicer switcher, see below
    ;;        ("C-M-n" . persp-next)
    ;;        ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    (persp-mode-prefix-key (kbd "C-c w")) ; pick your own prefix key here
    :init
    (persp-mode))
#+END_SRC

**** Projectile
Projectile is a quick and easy project management package that "just works". We're
going to install it and make sure it's loaded immediately.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :after perspective
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (defun my/switch-project-action ()
      "Switch to a workspace with the project name and start `magit-status'."
      (persp-switch (projectile-project-name))
      ;; (magit-status-setup-buffer)
      (projectile-find-file))
    (setq projectile-switch-project-action #'my/switch-project-action)
    (projectile-mode))
#+END_SRC

**** Treemacs
Tree layout file explorer for Emacs
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package treemacs
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                2000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first

            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-header-scroll-indicators        '(nil . "^^^^^^")
            treemacs-hide-dot-git-directory          t
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-project-follow-into-home        nil
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           35
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
        (treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :requires evil)

  (use-package treemacs-projectile
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  (use-package treemacs-magit
    :after (treemacs magit))

  (use-package treemacs-perspectivep ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs perspective) ;;or perspective vs. persp-mode
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-all-the-icons
    :after (treemacs all-the-icons)
    :config
    (treemacs-load-theme "all-the-icons"))
#+END_SRC

*** Programming
**** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook ((c++-mode python-mode java-mode js-mode) . lsp-deferred)
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-sideline-enable t
          lsp-ui-sideline-show-hover nil
          lsp-ui-doc-position 'bottom
          lsp-ui-doc-enable nil
          lsp-ui-doc-header t
          lsp-ui-doc-include-signature t
          lsp-ui-doc-border (face-foreground 'default)
          lsp-ui-sideline-show-code-actions t
          lsp-ui-sideline-delay 0.05)
    (lsp-ui-doc-show))
#+END_SRC

**** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+END_SRC

**** Format All
#+begin_src emacs-lisp
  (use-package format-all)
#+end_src

**** Python
#+begin_src emacs-lisp
  (use-package python
    :config
    ;; Stop the spam!
    ;; Let Emacs guess Python indent silently
    (setq python-indent-guess-indent-offset t
          python-indent-guess-indent-offset-verbose nil)

    ;; Default to Python 3. Prefer the versioned Python binaries since some
    ;; systems link the unversioned one to Python 2.
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3")))

  (use-package pyimport
    :defer t)

  (use-package py-isort
    :defer t)

  (use-package conda
    :after python
    :init
    ;; support for mambaforge envs
    (setq conda-anaconda-home "~/mambaforge/"
          conda-env-home-directory "~/mambaforge/")
    :config
    ;; interactive shell support
    (conda-env-initialize-interactive-shells)
    ;; if you want eshell support, include:
    (conda-env-initialize-eshell)
    ;; enable auto-activation
    ;; (conda-env-autoactivate-mode t)
    ;; if you want to automatically activate a conda environment on the opening of a file:
                                          ;(add-to-hook 'find-file-hook (lambda () (when (bound-and-true-p conda-project-env-path)
                                          ;                                          (conda-env-activate-for-buffer))))
    )
        #+end_src
** Post Initialization
Let's lower our GC thresholds back down to a sane level.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000)
        gc-cons-percentage 0.1)
#+END_SRC
